#! /usr/bin/python2.7

#from __future__ import print_function
from dolfin import *
from mshr import *
import numpy as np

xc = [ -2.36111111111,2.5,3.47222222222,-0.138888888889,2.77777777778,1.94444444444,3.05555555556,0.277777777778,3.19444444444,-0.277777777778,0.416666666667,
	-1.80555555556,3.33333333333,-0.555555555556,3.05555555556,2.91666666667,-1.52777777778,-3.33333333333,-1.25,-2.5,-1.94444444444,
	-0.277777777778,0.138888888889,2.36111111111,2.22222222222,-1.25,2.91666666667,-3.33333333333,-0.138888888889,-0.972222222222,-1.94444444444,
	1.66666666667,1.11111111111,-1.11111111111,1.11111111111,0.416666666667,0.972222222222,-2.77777777778,3.47222222222,-3.05555555556,-1.80555555556,
	-1.94444444444,-2.91666666667,2.91666666667,-0.416666666667,3.05555555556,2.91666666667,-0.416666666667,0.833333333333,3.19444444444,1.66666666667,
	0.0,-0.833333333333,-0.833333333333,-1.66666666667,-0.972222222222,-0.555555555556,-3.33333333333,2.36111111111,0.138888888889,-3.05555555556,
	-2.08333333333,-2.91666666667,-3.05555555556,3.05555555556,-3.33333333333,-2.63888888889,-2.08333333333,2.08333333333,-0.277777777778,1.25,
	-0.694444444444,2.63888888889,-3.19444444444,2.08333333333,2.5,-2.22222222222,2.36111111111,1.25,2.63888888889,-0.972222222222,
	-2.77777777778,-1.80555555556,-0.416666666667,-2.22222222222,-1.52777777778]

yc = [ -2.22222222222,1.52777777778,-2.08333333333,-0.416666666667,-2.77777777778,-0.277777777778,2.77777777778,2.77777777778,2.08333333333,-2.22222222222,0.0,
	2.5,-3.33333333333,0.694444444444,-2.22222222222,-2.08333333333,-2.08333333333,0.833333333333,1.25,3.19444444444,3.05555555556,
	2.63888888889,-1.66666666667,-0.416666666667,-3.19444444444,0.555555555556,3.33333333333,3.05555555556,-3.05555555556,0.555555555556,-1.25,
	-1.25,-2.08333333333,-3.19444444444,-2.08333333333,1.94444444444,-0.277777777778,0.833333333333,0.277777777778,-3.19444444444,-1.94444444444,
	-3.47222222222,3.05555555556,-2.63888888889,1.25,-2.08333333333,2.77777777778,0.555555555556,2.08333333333,-1.66666666667,2.36111111111,
	2.36111111111,0.277777777778,1.25,2.77777777778,2.5,0.972222222222,3.05555555556,2.22222222222,2.22222222222,1.38888888889,
	0.694444444444,-3.19444444444,-2.36111111111,1.38888888889,-2.08333333333,2.77777777778,3.33333333333,-1.11111111111,-0.972222222222,0.277777777778,
	-0.694444444444,-3.05555555556,1.66666666667,-2.22222222222,-1.80555555556,-1.52777777778,-3.05555555556,-0.416666666667,-3.47222222222,0.277777777778,
	0.416666666667,1.38888888889,-0.416666666667,-3.33333333333,-3.05555555556]

zc = [0.972222222222,-2.63888888889,-2.08333333333,3.33333333333,-2.63888888889,-2.77777777778,0.138888888889,3.33333333333,1.94444444444,1.52777777778,-2.91666666667,
	-0.694444444444,1.25,-0.972222222222,2.91666666667,2.08333333333,2.77777777778,2.36111111111,-3.19444444444,1.80555555556,1.11111111111,
	1.94444444444,2.63888888889,-0.555555555556,-1.66666666667,-0.694444444444,-3.33333333333,-0.833333333333,0.277777777778,1.38888888889,-0.138888888889,
	-2.77777777778,-3.33333333333,-2.5,-2.5,2.22222222222,3.33333333333,-3.05555555556,1.80555555556,0.972222222222,-2.36111111111,
	-2.36111111111,-0.972222222222,0.0,0.0,1.94444444444,0.972222222222,1.11111111111,-3.05555555556,-3.19444444444,1.11111111111,
	0.277777777778,0.833333333333,3.05555555556,0.833333333333,2.5,0.277777777778,2.77777777778,0.833333333333,1.52777777778,0.694444444444,
	3.05555555556,-0.833333333333,1.38888888889,0.138888888889,-3.05555555556,1.66666666667,-2.08333333333,-3.33333333333,-0.972222222222,-2.63888888889,
	-2.08333333333,-1.11111111111,3.05555555556,-0.416666666667,-2.22222222222,2.5,-2.36111111111,-2.63888888889,1.25,-1.25,
	-2.5,-1.11111111111,2.22222222222,1.80555555556,3.33333333333]

rc = [ 1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,1.25,
	1.25,1.25,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,
	0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,
	0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,
	0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.972222222222,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,
	0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,
	0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,
	0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.833333333333,
	0.833333333333,0.833333333333,0.833333333333,0.833333333333,0.694444444444]

Numb_spheres=20

class domain_spheres(SubDomain):
    # def __init__(self,_xc,_yc,_zc,_rc):
    #     self.xc = _xc
    #     self.yc = _yc
    #     self.zc = _zc
    #     self.rc = _rc
    def inside(self, x, on_boundary):
        flag=False
        for i in range(Numb_spheres):
            if ( on_boundary and ( ((x[0]-xc[i])**2 + (x[1]-yc[i])**2 + (x[2]-zc[i])**2) < rc[i]**2+2.0 ) ):
                flag=True
        return flag

# Read mesh
mesh = Mesh("mesh.xml.gz")

# Function to mark inner surface of pulley
class SpheresSubDomain(SubDomain):
    def inside(self, x, on_boundary):
        flag=False
        for i in range(Numb_spheres):
            if on_boundary and ( (x[0]-xc[i])**2 + (x[1]-yc[i])**2 + (x[2]-zc[i])**2) < (rc[i]**2)+2.0 :
                flag=True
        return flag

boundary_parts = MeshFunction("size_t", mesh, mesh.topology().dim() - 1)
boundary_parts.set_all(0)
spheres = SpheresSubDomain()
spheres.mark(boundary_parts,1)

ds = Measure("ds", domain=mesh, subdomain_data=boundary_parts)
g=1.0
Cat=np.log(2.0)
qn=-1.0
qp=1.0
CG = FunctionSpace(mesh, "Lagrange", 1)


CatCharge=assemble(( (qp*exp(Cat) ) )*dx(mesh) )
SurfaceCharge = assemble(g*ds(1))
inte = CatCharge + SurfaceCharge
An=np.log(-inte/assemble(qn*dx(mesh)))
AnCharge=assemble(( (qn*exp(An) ) )*dx(mesh) )
print "Cation =", Cat, "Anion = ", An, "g = ", g
print "Cation Net charge is", CatCharge
print "Anion Net charge is", AnCharge
print "Surface Net charge is", SurfaceCharge
print "Total Net charge is", CatCharge + AnCharge + SurfaceCharge


print '#############################'
Cat=0.69314718056
An=0.18860240241
g=Constant(1.0)
CatCharge=assemble(( (qp*exp(Cat) ) )*dx(mesh) )
AnCharge=assemble(( (qn*exp(An) ) )*dx(mesh) )
SurfaceCharge = assemble(g*ds(1))
print "Total Net charge is", CatCharge + AnCharge + SurfaceCharge
# print assemble(g*v*ds(1))
