# Copyright (C) 2014 CCMA@PSU Maximilian Metti, Xiaozhe Hu
#
#   Define bilinear and linear forms for 
#   the Stokes' equations using a Discontinuous Galerkin approach
#
# Compile this form with FFC: ffc -O -l dolfin dg-stokes.ufl

##  Finite Element Space
V  = FiniteElement("RT", tetrahedron, 1)
Q  = FiniteElement("Discontinuous Lagrange", tetrahedron, 1)
VQ = V * Q

##  Trial and Test Functions
(u, p) = TrialFunctions(VQ)
(v, q) = TestFunctions(VQ)

##  Previous Iterates
uu  = Coefficient(V)
pp  = Coefficient(Q)

##  Forcing Potential
CG  = FiniteElement("Lagrange", tetrahedron, 1)
phi = Coefficient(CG)
cation = Coefficient(CG)
anion  = Coefficient(CG)
qp     = Constant(tetrahedron)
qn     = Constant(tetrahedron)

# Linear Updates
du      = Coefficient(V)
dPress  = Coefficient(Q)
dPhi    = Coefficient(CG)
dCat    = Coefficient(CG)
dAn     = Coefficient(CG)


##  Coefficients
mu  = Constant(tetrahedron)

##  DG-terms
alpha = Constant(tetrahedron)
h     = 2.0*Circumradius(tetrahedron)
h_avg = ( h('+')+h('-') )/2.0
n_vec = FacetNormal(tetrahedron)

a   = ( 2.0*mu* inner( sym(grad(u)), sym(grad(v)) ) )*dx    -    ( p*div(v) )*dx   +   ( div(u)*q )*dx \
	+ ( 2.0*mu*(alpha/h_avg)* inner( avg(sym(grad(u))), sym(outer(v('+'),n_vec('+')) + outer(v('-'),n_vec('-'))) ) )*dS \
	+ ( 2.0*mu*(alpha/h_avg)* inner( sym(outer(u('+'),n_vec('+')) + outer(u('-'),n_vec('-'))), avg(sym(grad(v))) ) )*dS \
	+ ( 2.0*mu*(alpha/h_avg)* inner( jump(u),jump(v) ) )*dS


L   = ( (qp*exp(cation)+qn*exp(anion))*inner( grad(phi),v ) )*dx \
	+ ( (qp*exp(cation)+qn*exp(anion))*inner(grad(dPhi),v)+(qp*exp(cation)*dCat+qn*exp(anion)*dAn)*inner(grad(phi),v) )*dx \
	- ( 2.0*mu* inner( sym(grad(uu)), sym(grad(v)) ) )*dx   +   ( pp*div(v) )*dx   -   ( div(uu)*q )*dx \
  	- ( 2.0*mu*(alpha/h_avg)* inner( avg(sym(grad(uu))),  sym(outer(v('+'),n_vec('+')) + outer(v('-'),n_vec('-'))) ) )*dS \
	- ( 2.0*mu*(alpha/h_avg)* inner( sym(outer(uu('+'),n_vec('+')) + outer(uu('-'),n_vec('-'))), avg(sym(grad(v))) ) )*dS \
	- ( 2.0*mu*(alpha/h_avg)* inner( jump(uu),jump(v) ) )*dS \
	- ( 2.0*mu* inner( sym(grad(du)), sym(grad(v)) ) )*dx   +   ( dPress*div(v) )*dx   -   ( div(du)*q )*dx \
	- ( 2.0*mu*(alpha/h_avg)* inner( avg(sym(grad(du))),  sym(outer(v('+'),n_vec('+')) + outer(v('-'),n_vec('-'))) ) )*dS \
	- ( 2.0*mu*(alpha/h_avg)* inner( sym(outer(du('+'),n_vec('+')) + outer(du('-'),n_vec('-'))), avg(sym(grad(v))) ) )*dS \
	- ( 2.0*mu*(alpha/h_avg)* inner( jump(du),jump(v) ) )*dS

