// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   optimize:                       True
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __STOKES_WITH_PNP_H
#define __STOKES_WITH_PNP_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class stokes_with_pnp_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  stokes_with_pnp_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new stokes_with_pnp_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class stokes_with_pnp_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  stokes_with_pnp_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
      y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new stokes_with_pnp_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class stokes_with_pnp_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  stokes_with_pnp_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Raviart-Thomas', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
      y[1] = 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
      y[2] = 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
      return result;
        break;
      }
    case 1:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
      y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
      return result;
        break;
      }
    case 2:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[9];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[10];
      y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      result = (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
      return result;
        break;
      }
    case 3:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7];
      y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
      return result;
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    y[0] = 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    y[1] = 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    y[2] = 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
    values[0] = result;
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
    values[1] = result;
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[9];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[10];
    y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    result = (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
    values[2] = result;
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7];
    y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
    values[3] = result;
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Evaluate function and change variables
    vertex_values[0] = dof_values[1]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[1] + dof_values[3]*((1.0/detJ)*(J[2]*(-1.0)));
    vertex_values[3] = dof_values[0]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[0] + J[2]*(-1.0)));
    vertex_values[6] = dof_values[0]*((1.0/detJ)*(J[1]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[9] = dof_values[0]*((1.0/detJ)*(J[2]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[2])) + dof_values[2]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[1] = dof_values[1]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[4] + dof_values[3]*((1.0/detJ)*(J[5]*(-1.0)));
    vertex_values[4] = dof_values[0]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[3] + J[5]*(-1.0)));
    vertex_values[7] = dof_values[0]*((1.0/detJ)*(J[4]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[10] = dof_values[0]*((1.0/detJ)*(J[5]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[5])) + dof_values[2]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[2] = dof_values[1]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[7] + dof_values[3]*((1.0/detJ)*(J[8]*(-1.0)));
    vertex_values[5] = dof_values[0]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[6] + J[8]*(-1.0)));
    vertex_values[8] = dof_values[0]*((1.0/detJ)*(J[7]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
    vertex_values[11] = dof_values[0]*((1.0/detJ)*(J[8]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[8])) + dof_values[2]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new stokes_with_pnp_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class stokes_with_pnp_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  stokes_with_pnp_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new stokes_with_pnp_finite_element_3();
  }

};

/// This class defines the interface for a finite element.

class stokes_with_pnp_finite_element_4: public ufc::finite_element
{
public:

  /// Constructor
  stokes_with_pnp_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_finite_element_4()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(FiniteElement('Raviart-Thomas', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (4,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 8;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 8; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 8; r++)
    {
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[12];
    for (unsigned int r = 0; r < 12; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 8; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
      y[1] = 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
      y[2] = 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
      return result;
        break;
      }
    case 1:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
      y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
      return result;
        break;
      }
    case 2:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[9];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[10];
      y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      result = (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
      return result;
        break;
      }
    case 3:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7];
      y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
      return result;
        break;
      }
    case 4:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 5:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[4];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    y[0] = 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    y[1] = 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    y[2] = 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
    values[0] = result;
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
    values[1] = result;
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[9];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[10];
    y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    result = (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
    values[2] = result;
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7];
    y[2] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
    values[3] = result;
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[4] = vals[3];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[3];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[6] = vals[3];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[7] = vals[3];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Evaluate function and change variables
    vertex_values[0] = dof_values[1]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[1] + dof_values[3]*((1.0/detJ)*(J[2]*(-1.0)));
    vertex_values[4] = dof_values[0]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[0] + J[2]*(-1.0)));
    vertex_values[8] = dof_values[0]*((1.0/detJ)*(J[1]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[12] = dof_values[0]*((1.0/detJ)*(J[2]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[2])) + dof_values[2]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[1] = dof_values[1]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[4] + dof_values[3]*((1.0/detJ)*(J[5]*(-1.0)));
    vertex_values[5] = dof_values[0]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[3] + J[5]*(-1.0)));
    vertex_values[9] = dof_values[0]*((1.0/detJ)*(J[4]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[13] = dof_values[0]*((1.0/detJ)*(J[5]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[5])) + dof_values[2]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[2] = dof_values[1]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[7] + dof_values[3]*((1.0/detJ)*(J[8]*(-1.0)));
    vertex_values[6] = dof_values[0]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[6] + J[8]*(-1.0)));
    vertex_values[10] = dof_values[0]*((1.0/detJ)*(J[7]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
    vertex_values[14] = dof_values[0]*((1.0/detJ)*(J[8]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[8])) + dof_values[2]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
    // Evaluate function and change variables
    vertex_values[3] = dof_values[4];
    vertex_values[7] = dof_values[5];
    vertex_values[11] = dof_values[6];
    vertex_values[15] = dof_values[7];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new stokes_with_pnp_finite_element_2();
        break;
      }
    case 1:
      {
        return new stokes_with_pnp_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new stokes_with_pnp_finite_element_4();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class stokes_with_pnp_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  stokes_with_pnp_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new stokes_with_pnp_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class stokes_with_pnp_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  stokes_with_pnp_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    dof_coordinates[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    dof_coordinates[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new stokes_with_pnp_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class stokes_with_pnp_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  stokes_with_pnp_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Raviart-Thomas', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
    dofs[1] = c.entity_indices[2][1];
    dofs[2] = c.entity_indices[2][2];
    dofs[3] = c.entity_indices[2][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
        break;
      }
    case 2:
      {
        dofs[0] = 2;
        break;
      }
    case 3:
      {
        dofs[0] = 3;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    dof_coordinates[1] = 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    dof_coordinates[2] = 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    dof_coordinates[3] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    dof_coordinates[4] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    dof_coordinates[5] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    dof_coordinates[6] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[9];
    dof_coordinates[7] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[10];
    dof_coordinates[8] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[11];
    dof_coordinates[9] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6];
    dof_coordinates[10] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7];
    dof_coordinates[11] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new stokes_with_pnp_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class stokes_with_pnp_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  stokes_with_pnp_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 4*num_global_entities[3];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 4*c.entity_indices[3][0];
    dofs[1] = 4*c.entity_indices[3][0] + 1;
    dofs[2] = 4*c.entity_indices[3][0] + 2;
    dofs[3] = 4*c.entity_indices[3][0] + 3;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new stokes_with_pnp_dofmap_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class stokes_with_pnp_dofmap_4: public ufc::dofmap
{
public:

  /// Constructor
  stokes_with_pnp_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_dofmap_4()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(FiniteElement('Raviart-Thomas', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Discontinuous Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (4,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[2] + 4*num_global_entities[3];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 8;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[2][0];
    dofs[1] = offset + c.entity_indices[2][1];
    dofs[2] = offset + c.entity_indices[2][2];
    dofs[3] = offset + c.entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[4] = offset + 4*c.entity_indices[3][0];
    dofs[5] = offset + 4*c.entity_indices[3][0] + 1;
    dofs[6] = offset + 4*c.entity_indices[3][0] + 2;
    dofs[7] = offset + 4*c.entity_indices[3][0] + 3;
    offset += 4*num_global_entities[3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
        break;
      }
    case 2:
      {
        dofs[0] = 2;
        break;
      }
    case 3:
      {
        dofs[0] = 3;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 4;
      dofs[1] = 5;
      dofs[2] = 6;
      dofs[3] = 7;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    dof_coordinates[1] = 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    dof_coordinates[2] = 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    dof_coordinates[3] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[6] + 0.333333333333333*vertex_coordinates[9];
    dof_coordinates[4] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[7] + 0.333333333333333*vertex_coordinates[10];
    dof_coordinates[5] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[8] + 0.333333333333333*vertex_coordinates[11];
    dof_coordinates[6] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[9];
    dof_coordinates[7] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[10];
    dof_coordinates[8] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[11];
    dof_coordinates[9] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[6];
    dof_coordinates[10] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[4] + 0.333333333333333*vertex_coordinates[7];
    dof_coordinates[11] = 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[5] + 0.333333333333333*vertex_coordinates[8];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = vertex_coordinates[6];
    dof_coordinates[19] = vertex_coordinates[7];
    dof_coordinates[20] = vertex_coordinates[8];
    dof_coordinates[21] = vertex_coordinates[9];
    dof_coordinates[22] = vertex_coordinates[10];
    dof_coordinates[23] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new stokes_with_pnp_dofmap_2();
        break;
      }
    case 1:
      {
        return new stokes_with_pnp_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new stokes_with_pnp_dofmap_4();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class stokes_with_pnp_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  stokes_with_pnp_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W1 = 0.166666666666667;
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25)
    
    // Values of basis functions at quadrature points.
    static const double FE0_C0[1][4] = \
    {{0.25, 0.25, 0.25, 0.25}};
    
    // Array of non-zero columns
    static const unsigned int nzc16[4] = {4, 5, 6, 7};
    
    static const double FE1_C0_D100[1][4] = \
    {{-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc13[4] = {0, 1, 2, 3};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 64; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 268.
    double G[3];
    G[0] = W1*det*w[0][0]*(2.0*(J[0]*J[0]*K[0]*K[0] + J[3]*K[1]*(J[0]*K[0] + J[3]*K[1]) + J[6]*K[2]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2]) + K[3]*(J[0]*(J[4]*K[1] + J[7]*K[2]) + J[1]*J[1]*K[3] + K[0]*(J[3]*J[4] + J[6]*J[7])) + K[4]*(J[1]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3]) + J[4]*J[4]*K[4] + J[7]*(J[3]*K[2] + J[6]*K[1])) + K[5]*(J[6]*(J[1]*K[0] + J[4]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5]) + K[2]*(J[0]*J[1] + J[3]*J[4])) + K[6]*(J[2]*J[2]*K[6] + J[5]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3]) + J[8]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[5]*J[5]*K[7] + J[8]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[8]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8])) + 4.0*(J[0]*J[1]*K[0]*K[3] + J[2]*K[6]*(J[0]*K[0] + J[1]*K[3]) + J[3]*J[4]*K[1]*K[4] + J[5]*K[7]*(J[3]*K[1] + J[4]*K[4]) + J[6]*J[7]*K[2]*K[5] + J[8]*K[8]*(J[6]*K[2] + J[7]*K[5])) + K[0]*K[0]*(J[3]*J[3] + J[6]*J[6]) + K[1]*K[1]*(J[0]*J[0] + J[6]*J[6]) + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3]) + K[3]*K[3]*(J[4]*J[4] + J[7]*J[7]) + K[4]*K[4]*(J[1]*J[1] + J[7]*J[7]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4]) + K[6]*K[6]*(J[5]*J[5] + J[8]*J[8]) + K[7]*K[7]*(J[2]*J[2] + J[8]*J[8]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5]))/(detJ*detJ);
    G[1] =  - W1*det*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    G[2] = W1*det*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 144
    for (unsigned int ip = 0; ip < 1; ip++)
    {
      
      // Number of operations for primary indices: 144
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc13[j]*8 + nzc13[k]] += FE1_C0_D100[0][j]*FE1_C0_D100[0][k]*G[0];
          // Number of operations to compute entry: 3
          A[nzc13[j]*8 + nzc16[k]] += FE0_C0[0][k]*FE1_C0_D100[0][j]*G[1];
          // Number of operations to compute entry: 3
          A[nzc16[j]*8 + nzc13[k]] += FE0_C0[0][j]*FE1_C0_D100[0][k]*G[2];
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class stokes_with_pnp_interior_facet_integral_0_otherwise: public ufc::interior_facet_integral
{
public:

  /// Constructor
  stokes_with_pnp_interior_facet_integral_0_otherwise() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_interior_facet_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates_0,
                               const double*  vertex_coordinates_1,
                               std::size_t facet_0,
                               std::size_t facet_1,
                               int cell_orientation_0,
                               int cell_orientation_1) const
  {
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, vertex_coordinates_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, vertex_coordinates_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v1 + 2]  + vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v2 + 1]  + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v2 + 2]) - (vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v1 + 2] + vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v0 + 1] + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v2 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v2 + 0]) - (vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v0 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v2 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v2 + 1]) - (vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v0 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(vertex_coordinates_0[3*facet_0] - vertex_coordinates_0[3*v0]) + a1*(vertex_coordinates_0[3*facet_0 + 1] - vertex_coordinates_0[3*v0 + 1])  + a2*(vertex_coordinates_0[3*facet_0 + 2] - vertex_coordinates_0[3*v0 + 2]) < 0;
    
    const double n_00 = direction ? a0 / det : -a0 / det;
    const double n_01 = direction ? a1 / det : -a1 / det;
    const double n_02 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Compute cell volume
    const double volume_0 = std::abs(detJ_0)/6.0;
    // Compute cell volume
    const double volume_1 = std::abs(detJ_1)/6.0;
    
    
    // Compute circumradius
    const double v1v2_0  = std::sqrt( (vertex_coordinates_0[6] - vertex_coordinates_0[3])*(vertex_coordinates_0[6] - vertex_coordinates_0[3]) + (vertex_coordinates_0[7] - vertex_coordinates_0[4])*(vertex_coordinates_0[7] - vertex_coordinates_0[4]) + (vertex_coordinates_0[8] - vertex_coordinates_0[5])*(vertex_coordinates_0[8] - vertex_coordinates_0[5]) );
    const double v0v2_0  = std::sqrt(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7]);
    const double v0v1_0  = std::sqrt(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6]);
    const double v0v3_0  = std::sqrt(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8]);
    const double v1v3_0  = std::sqrt( (vertex_coordinates_0[9] - vertex_coordinates_0[3])*(vertex_coordinates_0[9] - vertex_coordinates_0[3]) + (vertex_coordinates_0[10] - vertex_coordinates_0[4])*(vertex_coordinates_0[10] - vertex_coordinates_0[4]) + (vertex_coordinates_0[11] - vertex_coordinates_0[5])*(vertex_coordinates_0[11] - vertex_coordinates_0[5]) );
    const double v2v3_0  = std::sqrt( (vertex_coordinates_0[9] - vertex_coordinates_0[6])*(vertex_coordinates_0[9] - vertex_coordinates_0[6]) + (vertex_coordinates_0[10] - vertex_coordinates_0[7])*(vertex_coordinates_0[10] - vertex_coordinates_0[7]) + (vertex_coordinates_0[11] - vertex_coordinates_0[8])*(vertex_coordinates_0[11] - vertex_coordinates_0[8]) );
    const  double la_0   = v1v2_0*v0v3_0;
    const  double lb_0   = v0v2_0*v1v3_0;
    const  double lc_0   = v0v1_0*v2v3_0;
    const  double s_0    = 0.5*(la_0+lb_0+lc_0);
    const  double area_0 = std::sqrt(s_0*(s_0-la_0)*(s_0-lb_0)*(s_0-lc_0));
    const double circumradius_0 = area_0 / ( 6.0*volume_0 );
    // Compute circumradius
    const double v1v2_1  = std::sqrt( (vertex_coordinates_1[6] - vertex_coordinates_1[3])*(vertex_coordinates_1[6] - vertex_coordinates_1[3]) + (vertex_coordinates_1[7] - vertex_coordinates_1[4])*(vertex_coordinates_1[7] - vertex_coordinates_1[4]) + (vertex_coordinates_1[8] - vertex_coordinates_1[5])*(vertex_coordinates_1[8] - vertex_coordinates_1[5]) );
    const double v0v2_1  = std::sqrt(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7]);
    const double v0v1_1  = std::sqrt(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6]);
    const double v0v3_1  = std::sqrt(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8]);
    const double v1v3_1  = std::sqrt( (vertex_coordinates_1[9] - vertex_coordinates_1[3])*(vertex_coordinates_1[9] - vertex_coordinates_1[3]) + (vertex_coordinates_1[10] - vertex_coordinates_1[4])*(vertex_coordinates_1[10] - vertex_coordinates_1[4]) + (vertex_coordinates_1[11] - vertex_coordinates_1[5])*(vertex_coordinates_1[11] - vertex_coordinates_1[5]) );
    const double v2v3_1  = std::sqrt( (vertex_coordinates_1[9] - vertex_coordinates_1[6])*(vertex_coordinates_1[9] - vertex_coordinates_1[6]) + (vertex_coordinates_1[10] - vertex_coordinates_1[7])*(vertex_coordinates_1[10] - vertex_coordinates_1[7]) + (vertex_coordinates_1[11] - vertex_coordinates_1[8])*(vertex_coordinates_1[11] - vertex_coordinates_1[8]) );
    const  double la_1   = v1v2_1*v0v3_1;
    const  double lb_1   = v0v2_1*v1v3_1;
    const  double lc_1   = v0v1_1*v2v3_1;
    const  double s_1    = 0.5*(la_1+lb_1+lc_1);
    const  double area_1 = std::sqrt(s_1*(s_1-la_1)*(s_1-lb_1)*(s_1-lc_1));
    const double circumradius_1 = area_1 / ( 6.0*volume_1 );
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Values of basis functions at quadrature points.
    static const double FE1_f0_C0[3][4] = \
    {{-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc21[4] = {0, 1, 2, 3};
    
    static const double FE1_f0_C0_D100[3][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc22[4] = {0, 1, 2, 3};
    
    static const double FE1_f0_C1[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666667, 0.333333333333333, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc23[4] = {0, 1, 2, 3};
    
    static const double FE1_f0_C2[3][4] = \
    {{-0.166666666666667, 0.166666666666666, -0.166666666666666, -0.833333333333333},
    {-0.666666666666666, 0.666666666666666, -0.666666666666666, -0.333333333333334},
    {-0.166666666666667, 0.166666666666666, -0.166666666666666, -0.833333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc24[4] = {0, 1, 2, 3};
    
    static const double FE1_f1_C0[3][1] = \
    {{-1.0},
    {-1.0},
    {-1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc29[1] = {1};
    
    // Array of non-zero columns
    static const unsigned int nzc35[1] = {3};
    
    static const double FE1_f2_C0[3][4] = \
    {{-0.166666666666666, -0.833333333333334, -0.166666666666666, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc31[4] = {0, 1, 2, 3};
    
    static const double FE1_f3_C1[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666666, 0.666666666666667, 0.333333333333333, 0.666666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc34[4] = {0, 1, 2, 3};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 256; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 1629.
    double G[33];
    G[0] = 2.0*det*w[0][0]*w[1][0]*(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[1] = det*w[0][0]*w[1][0]*(-0.5*(J_1[0]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + J_1[3]*(J_1[0]*K_1[0]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + J_1[6]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[0]*K_1[0] + J_1[3]*K_1[1]))) - (J_1[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[2] = 2.0*det*w[0][0]*w[1][0]*(J_1[0]*J_1[1] + J_1[3]*J_1[4] + J_1[6]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[3] = 2.0*det*w[0][0]*w[1][0]*(J_1[0]*J_1[2] + J_1[3]*J_1[5] + J_1[6]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[4] = -2.0*det*w[0][0]*w[1][0]*(J_0[0]*J_1[0] + J_0[3]*J_1[3] + J_0[6]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[5] = det*w[0][0]*w[1][0]*(-0.5*(n_00*(J_1[3]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[0]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[0]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[3]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) - (J_1[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[6] = -2.0*det*w[0][0]*w[1][0]*(J_0[1]*J_1[0] + J_0[4]*J_1[3] + J_0[7]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[7] = -2.0*det*w[0][0]*w[1][0]*(J_0[2]*J_1[0] + J_0[5]*J_1[3] + J_0[8]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[8] = det*w[0][0]*w[1][0]*(-0.5*(J_1[1]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[8]*K_1[6])) + J_1[4]*(J_1[1]*K_1[3]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[8]*K_1[7])) + J_1[7]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[1]*K_1[3] + J_1[4]*K_1[4]))) - (J_1[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[9] = det*w[0][0]*w[1][0]*(-0.5*(J_1[2]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3])) + J_1[5]*(J_1[2]*K_1[6]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4])) + J_1[8]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[2]*K_1[6] + J_1[5]*K_1[7]))) - (J_1[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[10] = det*w[0][0]*w[1][0]*(0.5*(n_00*(J_0[3]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[0]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[0]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[3]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) + J_0[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[11] = det*w[0][0]*w[1][0]*(0.5*(n_00*(J_0[4]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[1]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[1]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[4]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) + J_0[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[12] = det*w[0][0]*w[1][0]*(0.5*(n_00*(J_0[5]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[2]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[2]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[5]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) + J_0[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[13] = 2.0*det*w[0][0]*w[1][0]*(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[14] = 2.0*det*w[0][0]*w[1][0]*(J_1[1]*J_1[2] + J_1[4]*J_1[5] + J_1[7]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[15] = -2.0*det*w[0][0]*w[1][0]*(J_0[0]*J_1[1] + J_0[3]*J_1[4] + J_0[6]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[16] = det*w[0][0]*w[1][0]*(-0.5*(n_00*(J_1[4]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[1]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[1]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[4]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) - (J_1[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[17] = -2.0*det*w[0][0]*w[1][0]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[18] = -2.0*det*w[0][0]*w[1][0]*(J_0[2]*J_1[1] + J_0[5]*J_1[4] + J_0[8]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[19] = 2.0*det*w[0][0]*w[1][0]*(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[20] = -2.0*det*w[0][0]*w[1][0]*(J_0[0]*J_1[2] + J_0[3]*J_1[5] + J_0[6]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[21] = det*w[0][0]*w[1][0]*(-0.5*(n_00*(J_1[5]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[2]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[2]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[5]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) - (J_1[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[22] = -2.0*det*w[0][0]*w[1][0]*(J_0[1]*J_1[2] + J_0[4]*J_1[5] + J_0[7]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[23] = -2.0*det*w[0][0]*w[1][0]*(J_0[2]*J_1[2] + J_0[5]*J_1[5] + J_0[8]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[24] = 2.0*det*w[0][0]*w[1][0]*(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[25] = det*w[0][0]*w[1][0]*(0.5*(J_0[0]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + J_0[3]*(J_0[0]*K_0[0]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + J_0[6]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[0]*K_0[0] + J_0[3]*K_0[1]))) + J_0[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[26] = 2.0*det*w[0][0]*w[1][0]*(J_0[0]*J_0[1] + J_0[3]*J_0[4] + J_0[6]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[27] = 2.0*det*w[0][0]*w[1][0]*(J_0[0]*J_0[2] + J_0[3]*J_0[5] + J_0[6]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[28] = det*w[0][0]*w[1][0]*(0.5*(J_0[1]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[8]*K_0[6])) + J_0[4]*(J_0[1]*K_0[3]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[8]*K_0[7])) + J_0[7]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[1]*K_0[3] + J_0[4]*K_0[4]))) + J_0[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[29] = det*w[0][0]*w[1][0]*(0.5*(J_0[2]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3])) + J_0[5]*(J_0[2]*K_0[6]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4])) + J_0[8]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[2]*K_0[6] + J_0[5]*K_0[7]))) + J_0[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[30] = 2.0*det*w[0][0]*w[1][0]*(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[31] = 2.0*det*w[0][0]*w[1][0]*(J_0[1]*J_0[2] + J_0[4]*J_0[5] + J_0[7]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[32] = 2.0*det*w[0][0]*w[1][0]*(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 8739
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 8739
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 2880
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc23[k]] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc24[k]] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc21[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc23[k]] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc24[k]] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc29[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc29[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc29[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc21[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc23[k]] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc24[k]] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 6918
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 6918
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[170] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 10] += FE1_f0_C0_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)*16 + 10] += FE1_f0_C2[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)*16 + 10] += FE1_f2_C0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc21[j]*16 + 10] += FE1_f0_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 10] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]*16 + 10] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]*16 + 10] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f2_C0[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f2_C0[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc21[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc23[k]] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc24[k]] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc31[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[10*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[1];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*I[2];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*I[3];
            // Number of operations to compute entry: 2
            A[10*16 + nzc21[k]] += FE1_f0_C0[ip][k]*I[4];
            // Number of operations to compute entry: 2
            A[10*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[5];
            // Number of operations to compute entry: 2
            A[10*16 + nzc23[k]] += FE1_f0_C1[ip][k]*I[6];
            // Number of operations to compute entry: 2
            A[10*16 + nzc24[k]] += FE1_f0_C2[ip][k]*I[7];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc35[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc35[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc35[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f2_C0[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f3_C1[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f3_C1[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f3_C1[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f2_C0[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + (nzc34[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f3_C1[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc21[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc23[k]] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc21[j]*16 + nzc24[k]] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc31[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc34[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f3_C1[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc34[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f3_C1[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc21[k]] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc29[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f1_C0[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc29[k]] += FE1_f0_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc29[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc29[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc29[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc29[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc23[k]] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc24[k]] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc29[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc29[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc29[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc29[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc29[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc29[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc29[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc29[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[170] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc29[j]*16 + 10] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc29[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 10] += FE1_f0_C0_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)*16 + 10] += FE1_f0_C2[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)*16 + 10] += FE1_f2_C0[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 10] += FE1_f0_C0_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc23[j]*16 + 10] += FE1_f0_C1[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc24[j]*16 + 10] += FE1_f0_C2[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc29[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc29[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc29[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc29[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc31[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[10*16 + nzc29[k]] += FE1_f1_C0[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[10*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[10*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[10*16 + nzc23[k]] += FE1_f0_C1[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[10*16 + nzc24[k]] += FE1_f0_C2[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc29[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc29[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + (nzc34[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc29[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc29[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc29[k]] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc29[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc35[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc29[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc35[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc29[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f3_C1[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f3_C1[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc23[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc31[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + (nzc34[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f3_C1[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc23[k]] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc23[j]*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc34[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f3_C1[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc23[k]] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 6918
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 6918
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[34] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc21[j] + 8)*16 + 2] += FE1_f0_C0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 2] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)*16 + 2] += FE1_f0_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)*16 + 2] += FE1_f0_C2[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 2] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]*16 + 2] += FE1_f0_C2[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc31[j]*16 + 2] += FE1_f2_C0[ip][j]*I[7];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc24[k]] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc31[k]] += FE1_f0_C0[ip][j]*FE1_f2_C0[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc31[k]] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f2_C0[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[2*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*I[1];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[2];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*I[3];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*I[4];
            // Number of operations to compute entry: 2
            A[2*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[5];
            // Number of operations to compute entry: 2
            A[2*16 + nzc24[k]] += FE1_f0_C2[ip][k]*I[6];
            // Number of operations to compute entry: 2
            A[2*16 + nzc31[k]] += FE1_f2_C0[ip][k]*I[7];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[34] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 8)*16 + 2] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 2] += FE1_f0_C0_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)*16 + 2] += FE1_f0_C1[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)*16 + 2] += FE1_f0_C2[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 2] += FE1_f0_C0_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc24[j]*16 + 2] += FE1_f0_C2[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc31[j]*16 + 2] += FE1_f2_C0[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc29[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc24[k]] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc31[k]] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[2*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[2*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[2*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[2*16 + nzc24[k]] += FE1_f0_C2[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[2*16 + nzc31[k]] += FE1_f2_C0[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 5295
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5295
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 4
          // Number of operations to compute entry: 1
          A[162] += I[0];
          // Number of operations to compute entry: 1
          A[170] += I[1];
          // Number of operations to compute entry: 1
          A[34] += I[2];
          // Number of operations to compute entry: 1
          A[42] += I[0];
          
          // Number of operations for primary indices: 96
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 10] += FE1_f0_C0_D100[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 2] += FE1_f0_C0_D100[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)*16 + 10] += FE1_f0_C2[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)*16 + 2] += FE1_f0_C2[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)*16 + 10] += FE1_f2_C0[ip][j]*I[7];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)*16 + 2] += FE1_f2_C0[ip][j]*I[8];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 10] += FE1_f0_C0_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 2] += FE1_f0_C0_D100[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[nzc24[j]*16 + 10] += FE1_f0_C2[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc24[j]*16 + 2] += FE1_f0_C2[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc31[j]*16 + 10] += FE1_f2_C0[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc31[j]*16 + 2] += FE1_f2_C0[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 96
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[10*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[3];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*I[5];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*I[7];
            // Number of operations to compute entry: 2
            A[10*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[10*16 + nzc24[k]] += FE1_f0_C2[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[10*16 + nzc31[k]] += FE1_f2_C0[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[4];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*I[6];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*I[8];
            // Number of operations to compute entry: 2
            A[2*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[2*16 + nzc24[k]] += FE1_f0_C2[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[2*16 + nzc31[k]] += FE1_f2_C0[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[34] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc35[j] + 8)*16 + 2] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 2] += FE1_f0_C0_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)*16 + 2] += FE1_f2_C0[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc34[j] + 8)*16 + 2] += FE1_f3_C1[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 2] += FE1_f0_C0_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc24[j]*16 + 2] += FE1_f0_C2[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc31[j]*16 + 2] += FE1_f2_C0[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc35[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f3_C1[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc31[k]] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc24[k]] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + (nzc34[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f3_C1[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc24[k]] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc34[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc24[k]] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[2*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[2*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[2*16 + (nzc34[k] + 8)] += FE1_f3_C1[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[2*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[2*16 + nzc24[k]] += FE1_f0_C2[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[2*16 + nzc31[k]] += FE1_f2_C0[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc35[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f1_C0[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc34[k]] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc35[k]] += FE1_f0_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc35[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc35[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C1[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0[ip][j]*FE1_f0_C2[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc22[k]] += FE1_f0_C0[ip][j]*FE1_f0_C0_D100[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc31[k]] += FE1_f0_C0[ip][j]*FE1_f2_C0[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc21[j] + 8)*16 + nzc34[k]] += FE1_f0_C0[ip][j]*FE1_f3_C1[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C1[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc31[k]] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc34[k]] += FE1_f0_C1[ip][j]*FE1_f3_C1[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C2[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc34[k]] += FE1_f0_C2[ip][j]*FE1_f3_C1[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f0_C0_D100[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f2_C0[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc34[k]] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc21[k] + 8)] += FE1_f0_C0[ip][k]*FE1_f3_C1[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f3_C1[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f3_C1[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc31[k]] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc34[k]] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc35[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc35[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 8)*16 + nzc34[k]] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f1_C0[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc34[k]] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc35[k]] += FE1_f0_C1[ip][j]*FE1_f1_C0[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc29[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc35[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc29[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc29[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C1[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C1[ip][j]*FE1_f0_C2[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C1[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc31[k]] += FE1_f0_C1[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc23[j] + 8)*16 + nzc34[k]] += FE1_f0_C1[ip][j]*FE1_f3_C1[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f0_C2[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc34[k]] += FE1_f0_C2[ip][j]*FE1_f3_C1[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc23[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C1[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f2_C0[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc34[k]] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc23[k] + 8)] += FE1_f0_C1[ip][k]*FE1_f3_C1[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f3_C1[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc31[k]] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc34[k]] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[170] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc35[j]*16 + 10] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc35[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f1_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc34[k]] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)*16 + 10] += FE1_f0_C0_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)*16 + 10] += FE1_f0_C2[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)*16 + 10] += FE1_f2_C0[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc22[j]*16 + 10] += FE1_f0_C0_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc31[j]*16 + 10] += FE1_f2_C0[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc34[j]*16 + 10] += FE1_f3_C1[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc35[k]] += FE1_f0_C2[ip][j]*FE1_f1_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f0_C2[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f0_C2[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc31[k]] += FE1_f0_C2[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 8)*16 + nzc34[k]] += FE1_f0_C2[ip][j]*FE1_f3_C1[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc34[k]] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc24[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f0_C2[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f2_C0[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc34[k]] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*FE1_f3_C1[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc31[k]] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc34[k]] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[10*16 + nzc35[k]] += FE1_f1_C0[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[10*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc24[k] + 8)] += FE1_f0_C2[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[10*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[10*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[10*16 + nzc31[k]] += FE1_f2_C0[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[10*16 + nzc34[k]] += FE1_f3_C1[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc35[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc35[k]] += FE1_f1_C0[ip][j]*FE1_f1_C0[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc35[j] + 8)*16 + nzc34[k]] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc31[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + (nzc34[k] + 8)] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f1_C0[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc31[k]] += FE1_f1_C0[ip][j]*FE1_f2_C0[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc35[j]*16 + nzc34[k]] += FE1_f1_C0[ip][j]*FE1_f3_C1[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc35[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc35[k]] += FE1_f0_C0_D100[ip][j]*FE1_f1_C0[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f2_C0[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc35[k] + 8)] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc35[k]] += FE1_f1_C0[ip][k]*FE1_f3_C1[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc22[j] + 8)*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc31[j] + 8)*16 + nzc34[k]] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + (nzc34[k] + 8)] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc31[k]] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc34[j] + 8)*16 + nzc34[k]] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc31[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + (nzc34[k] + 8)] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc31[k]] += FE1_f0_C0_D100[ip][j]*FE1_f2_C0[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc22[j]*16 + nzc34[k]] += FE1_f0_C0_D100[ip][j]*FE1_f3_C1[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + (nzc34[k] + 8)] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f2_C0[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc31[k]] += FE1_f2_C0[ip][j]*FE1_f2_C0[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc31[j]*16 + nzc34[k]] += FE1_f2_C0[ip][j]*FE1_f3_C1[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc22[k] + 8)] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc31[k] + 8)] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + (nzc34[k] + 8)] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc22[k]] += FE1_f0_C0_D100[ip][k]*FE1_f3_C1[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc31[k]] += FE1_f2_C0[ip][k]*FE1_f3_C1[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc34[j]*16 + nzc34[k]] += FE1_f3_C1[ip][j]*FE1_f3_C1[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class stokes_with_pnp_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  stokes_with_pnp_cell_integral_1_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_cell_integral_1_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true, true, true, true, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W15[15] = {0.0302836780970892, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864};
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25), (0.0, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.0), (0.333333333333333, 0.0, 0.333333333333333), (0.727272727272727, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.727272727272727), (0.0909090909090909, 0.727272727272727, 0.0909090909090909), (0.433449846426336, 0.0665501535736643, 0.0665501535736643), (0.0665501535736643, 0.433449846426336, 0.0665501535736643), (0.0665501535736643, 0.0665501535736643, 0.433449846426336), (0.0665501535736643, 0.433449846426336, 0.433449846426336), (0.433449846426336, 0.0665501535736643, 0.433449846426336), (0.433449846426336, 0.433449846426336, 0.0665501535736643)
    
    // Values of basis functions at quadrature points.
    static const double FE0[15][4] = \
    {{0.25, 0.25, 0.25, 0.25},
    {0.333333333333333, 0.0, 0.333333333333333, 0.333333333333333},
    {0.0, 0.333333333333333, 0.333333333333333, 0.333333333333333},
    {0.333333333333333, 0.333333333333333, 0.333333333333333, 0.0},
    {0.333333333333333, 0.333333333333333, 0.0, 0.333333333333333},
    {0.090909090909091, 0.727272727272727, 0.0909090909090909, 0.0909090909090909},
    {0.727272727272727, 0.0909090909090908, 0.0909090909090909, 0.0909090909090909},
    {0.090909090909091, 0.0909090909090909, 0.0909090909090909, 0.727272727272727},
    {0.090909090909091, 0.0909090909090908, 0.727272727272727, 0.0909090909090909},
    {0.433449846426336, 0.433449846426336, 0.0665501535736643, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.433449846426336, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736644, 0.0665501535736643, 0.433449846426336, 0.433449846426336},
    {0.0665501535736644, 0.433449846426336, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736643, 0.433449846426336, 0.433449846426336, 0.0665501535736643}};
    
    // Array of non-zero columns
    static const unsigned int nzc19[4] = {4, 5, 6, 7};
    
    static const double FE0_D001[15][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    static const double FE3_C0[15][4] = \
    {{-0.25, -0.75, -0.25, 0.25},
    {0.0, -1.0, 0.0, 0.0},
    {-0.333333333333333, -0.666666666666667, -0.333333333333333, 0.333333333333334},
    {-0.333333333333333, -0.666666666666667, -0.333333333333333, 0.333333333333333},
    {-0.333333333333333, -0.666666666666667, -0.333333333333333, 0.333333333333333},
    {-0.727272727272727, -0.272727272727272, -0.727272727272727, 0.727272727272727},
    {-0.0909090909090907, -0.909090909090909, -0.0909090909090907, 0.0909090909090907},
    {-0.0909090909090909, -0.909090909090909, -0.090909090909091, 0.0909090909090909},
    {-0.0909090909090911, -0.909090909090909, -0.0909090909090911, 0.0909090909090911},
    {-0.433449846426336, -0.566550153573664, -0.433449846426336, 0.433449846426336},
    {-0.0665501535736643, -0.933449846426336, -0.0665501535736643, 0.0665501535736644},
    {-0.0665501535736642, -0.933449846426336, -0.0665501535736643, 0.0665501535736643},
    {-0.0665501535736645, -0.933449846426336, -0.0665501535736645, 0.0665501535736645},
    {-0.433449846426336, -0.566550153573664, -0.433449846426336, 0.433449846426336},
    {-0.433449846426336, -0.566550153573664, -0.433449846426336, 0.433449846426336}};
    
    // Array of non-zero columns
    static const unsigned int nzc15[4] = {0, 1, 2, 3};
    
    static const double FE3_C0_D100[15][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc16[4] = {0, 1, 2, 3};
    
    static const double FE3_C1[15][4] = \
    {{-0.25, 0.25, 0.75, 0.25},
    {-0.333333333333333, 0.333333333333333, 0.666666666666667, 0.333333333333333},
    {-0.333333333333333, 0.333333333333333, 0.666666666666667, 0.333333333333333},
    {-0.333333333333333, 0.333333333333333, 0.666666666666667, 0.333333333333333},
    {0.0, 0.0, 1.0, 0.0},
    {-0.0909090909090911, 0.090909090909091, 0.909090909090909, 0.0909090909090912},
    {-0.0909090909090908, 0.0909090909090907, 0.909090909090909, 0.0909090909090909},
    {-0.090909090909091, 0.0909090909090909, 0.909090909090909, 0.090909090909091},
    {-0.727272727272727, 0.727272727272727, 0.272727272727273, 0.727272727272727},
    {-0.0665501535736643, 0.0665501535736643, 0.933449846426335, 0.0665501535736645},
    {-0.433449846426336, 0.433449846426336, 0.566550153573664, 0.433449846426336},
    {-0.0665501535736643, 0.0665501535736642, 0.933449846426336, 0.0665501535736643},
    {-0.433449846426336, 0.433449846426336, 0.566550153573664, 0.433449846426336},
    {-0.0665501535736645, 0.0665501535736644, 0.933449846426335, 0.0665501535736645},
    {-0.433449846426336, 0.433449846426336, 0.566550153573664, 0.433449846426336}};
    
    // Array of non-zero columns
    static const unsigned int nzc17[4] = {0, 1, 2, 3};
    
    static const double FE3_C2[15][4] = \
    {{-0.25, 0.25, -0.25, -0.75},
    {-0.333333333333333, 0.333333333333333, -0.333333333333333, -0.666666666666667},
    {-0.333333333333333, 0.333333333333333, -0.333333333333333, -0.666666666666667},
    {0.0, 0.0, 0.0, -1.0},
    {-0.333333333333333, 0.333333333333333, -0.333333333333333, -0.666666666666667},
    {-0.0909090909090909, 0.0909090909090908, -0.0909090909090908, -0.909090909090909},
    {-0.0909090909090907, 0.0909090909090906, -0.0909090909090906, -0.909090909090909},
    {-0.727272727272727, 0.727272727272727, -0.727272727272726, -0.272727272727273},
    {-0.0909090909090908, 0.0909090909090907, -0.0909090909090907, -0.909090909090909},
    {-0.0665501535736642, 0.0665501535736641, -0.0665501535736641, -0.933449846426336},
    {-0.0665501535736641, 0.066550153573664, -0.0665501535736641, -0.933449846426336},
    {-0.433449846426335, 0.433449846426335, -0.433449846426335, -0.566550153573665},
    {-0.433449846426335, 0.433449846426335, -0.433449846426335, -0.566550153573665},
    {-0.433449846426335, 0.433449846426335, -0.433449846426335, -0.566550153573665},
    {-0.0665501535736643, 0.0665501535736641, -0.0665501535736642, -0.933449846426336}};
    
    // Array of non-zero columns
    static const unsigned int nzc18[4] = {0, 1, 2, 3};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 8; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 409.
    double G[21];
    G[0] = det*w[5][0]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2])/detJ;
    G[1] = det*w[5][0]*(J[0]*K[3] + J[3]*K[4] + J[6]*K[5])/detJ;
    G[2] = det*w[5][0]*(J[0]*K[6] + J[3]*K[7] + J[6]*K[8])/detJ;
    G[3] = det*w[6][0]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2])/detJ;
    G[4] = det*w[6][0]*(J[0]*K[3] + J[3]*K[4] + J[6]*K[5])/detJ;
    G[5] = det*w[6][0]*(J[0]*K[6] + J[3]*K[7] + J[6]*K[8])/detJ;
    G[6] = det*w[12][0]*( - (K[0]*K[0]*(J[3]*J[3] + J[6]*J[6]) + K[1]*K[1]*(J[0]*J[0] + J[6]*J[6]) + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3]) + K[3]*K[3]*(J[4]*J[4] + J[7]*J[7]) + K[4]*K[4]*(J[1]*J[1] + J[7]*J[7]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4]) + K[6]*K[6]*(J[5]*J[5] + J[8]*J[8]) + K[7]*K[7]*(J[2]*J[2] + J[8]*J[8]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5]))-2.0*(J[0]*J[0]*K[0]*K[0] + J[3]*K[1]*(J[0]*K[0] + J[3]*K[1]) + J[6]*K[2]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2]) + K[3]*(J[0]*(J[4]*K[1] + J[7]*K[2]) + J[1]*J[1]*K[3] + K[0]*(J[3]*J[4] + J[6]*J[7])) + K[4]*(J[1]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3]) + J[4]*J[4]*K[4] + J[7]*(J[3]*K[2] + J[6]*K[1])) + K[5]*(J[6]*(J[1]*K[0] + J[4]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5]) + K[2]*(J[0]*J[1] + J[3]*J[4])) + K[6]*(J[2]*J[2]*K[6] + J[5]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3]) + J[8]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[5]*J[5]*K[7] + J[8]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[8]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8]))-4.0*(J[0]*J[1]*K[0]*K[3] + J[2]*K[6]*(J[0]*K[0] + J[1]*K[3]) + J[3]*J[4]*K[1]*K[4] + J[5]*K[7]*(J[3]*K[1] + J[4]*K[4]) + J[6]*J[7]*K[2]*K[5] + J[8]*K[8]*(J[6]*K[2] + J[7]*K[5])))/(detJ*detJ);
    G[7] = det*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    G[8] = det*w[5][0]*(J[1]*K[0] + J[4]*K[1] + J[7]*K[2])/detJ;
    G[9] = det*w[5][0]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5])/detJ;
    G[10] = det*w[5][0]*(J[1]*K[6] + J[4]*K[7] + J[7]*K[8])/detJ;
    G[11] = det*w[6][0]*(J[1]*K[0] + J[4]*K[1] + J[7]*K[2])/detJ;
    G[12] = det*w[6][0]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5])/detJ;
    G[13] = det*w[6][0]*(J[1]*K[6] + J[4]*K[7] + J[7]*K[8])/detJ;
    G[14] = det*w[5][0]*(J[2]*K[0] + J[5]*K[1] + J[8]*K[2])/detJ;
    G[15] = det*w[5][0]*(J[2]*K[3] + J[5]*K[4] + J[8]*K[5])/detJ;
    G[16] = det*w[5][0]*(J[2]*K[6] + J[5]*K[7] + J[8]*K[8])/detJ;
    G[17] = det*w[6][0]*(J[2]*K[0] + J[5]*K[1] + J[8]*K[2])/detJ;
    G[18] = det*w[6][0]*(J[2]*K[3] + J[5]*K[4] + J[8]*K[5])/detJ;
    G[19] = det*w[6][0]*(J[2]*K[6] + J[5]*K[7] + J[8]*K[8])/detJ;
    G[20] =  - det*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 3585
    for (unsigned int ip = 0; ip < 15; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      
      // Total number of operations to compute function values = 24
      for (unsigned int r = 0; r < 2; r++)
      {
        F4 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F5 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F6 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F7 += FE0_D001[ip][r]*w[9][nzc2[r]];
        F8 += FE0_D001[ip][r]*w[9][nzc1[r]];
        F9 += FE0_D001[ip][r]*w[9][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 64
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[10][r];
        F1 += FE0[ip][r]*w[3][r];
        F2 += FE0[ip][r]*w[11][r];
        F3 += FE0[ip][r]*w[4][r];
        F10 += FE3_C0_D100[ip][r]*w[0][r];
        F11 += FE3_C0_D100[ip][r]*w[7][r];
        F12 += FE0[ip][r]*w[1][r];
        F13 += FE0[ip][r]*w[8][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 111
      double I[5];
      // Number of operations: 34
      I[0] = W15[ip]*(std::exp(F1)*(G[0]*(F7 + F4*(1.0 + F0)) + G[1]*(F8 + F5*(1.0 + F0)) + G[2]*(F9 + F6*(1.0 + F0))) + std::exp(F3)*(G[3]*(F7 + F4*(1.0 + F2)) + G[4]*(F8 + F5*(1.0 + F2)) + G[5]*(F9 + F6*(1.0 + F2))));
      
      // Number of operations: 6
      I[1] = W15[ip]*(G[6]*(F10 + F11) + G[7]*(F12 + F13));
      
      // Number of operations: 34
      I[2] = W15[ip]*(std::exp(F1)*(G[10]*(F9 + F6*(1.0 + F0)) + G[8]*(F7 + F4*(1.0 + F0)) + G[9]*(F8 + F5*(1.0 + F0))) + std::exp(F3)*(G[11]*(F7 + F4*(1.0 + F2)) + G[12]*(F8 + F5*(1.0 + F2)) + G[13]*(F9 + F6*(1.0 + F2))));
      
      // Number of operations: 34
      I[3] = W15[ip]*(std::exp(F1)*(G[14]*(F7 + F4*(1.0 + F0)) + G[15]*(F8 + F5*(1.0 + F0)) + G[16]*(F9 + F6*(1.0 + F0))) + std::exp(F3)*(G[17]*(F7 + F4*(1.0 + F2)) + G[18]*(F8 + F5*(1.0 + F2)) + G[19]*(F9 + F6*(1.0 + F2))));
      
      // Number of operations: 3
      I[4] = G[20]*W15[ip]*(F10 + F11);
      
      
      // Number of operations for primary indices: 40
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc15[j]] += FE3_C0[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc16[j]] += FE3_C0_D100[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc17[j]] += FE3_C1[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc18[j]] += FE3_C2[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc19[j]] += FE0[ip][j]*I[4];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class stokes_with_pnp_interior_facet_integral_1_otherwise: public ufc::interior_facet_integral
{
public:

  /// Constructor
  stokes_with_pnp_interior_facet_integral_1_otherwise() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_interior_facet_integral_1_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, false, false, false, false, false, false, true, false, false, false, false, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates_0,
                               const double*  vertex_coordinates_1,
                               std::size_t facet_0,
                               std::size_t facet_1,
                               int cell_orientation_0,
                               int cell_orientation_1) const
  {
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, vertex_coordinates_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, vertex_coordinates_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v1 + 2]  + vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v2 + 1]  + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v2 + 2]) - (vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v1 + 2] + vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v0 + 1] + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v2 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v2 + 0]) - (vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v0 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v2 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v2 + 1]) - (vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v0 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(vertex_coordinates_0[3*facet_0] - vertex_coordinates_0[3*v0]) + a1*(vertex_coordinates_0[3*facet_0 + 1] - vertex_coordinates_0[3*v0 + 1])  + a2*(vertex_coordinates_0[3*facet_0 + 2] - vertex_coordinates_0[3*v0 + 2]) < 0;
    
    const double n_00 = direction ? a0 / det : -a0 / det;
    const double n_01 = direction ? a1 / det : -a1 / det;
    const double n_02 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Compute cell volume
    const double volume_0 = std::abs(detJ_0)/6.0;
    // Compute cell volume
    const double volume_1 = std::abs(detJ_1)/6.0;
    
    
    // Compute circumradius
    const double v1v2_0  = std::sqrt( (vertex_coordinates_0[6] - vertex_coordinates_0[3])*(vertex_coordinates_0[6] - vertex_coordinates_0[3]) + (vertex_coordinates_0[7] - vertex_coordinates_0[4])*(vertex_coordinates_0[7] - vertex_coordinates_0[4]) + (vertex_coordinates_0[8] - vertex_coordinates_0[5])*(vertex_coordinates_0[8] - vertex_coordinates_0[5]) );
    const double v0v2_0  = std::sqrt(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7]);
    const double v0v1_0  = std::sqrt(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6]);
    const double v0v3_0  = std::sqrt(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8]);
    const double v1v3_0  = std::sqrt( (vertex_coordinates_0[9] - vertex_coordinates_0[3])*(vertex_coordinates_0[9] - vertex_coordinates_0[3]) + (vertex_coordinates_0[10] - vertex_coordinates_0[4])*(vertex_coordinates_0[10] - vertex_coordinates_0[4]) + (vertex_coordinates_0[11] - vertex_coordinates_0[5])*(vertex_coordinates_0[11] - vertex_coordinates_0[5]) );
    const double v2v3_0  = std::sqrt( (vertex_coordinates_0[9] - vertex_coordinates_0[6])*(vertex_coordinates_0[9] - vertex_coordinates_0[6]) + (vertex_coordinates_0[10] - vertex_coordinates_0[7])*(vertex_coordinates_0[10] - vertex_coordinates_0[7]) + (vertex_coordinates_0[11] - vertex_coordinates_0[8])*(vertex_coordinates_0[11] - vertex_coordinates_0[8]) );
    const  double la_0   = v1v2_0*v0v3_0;
    const  double lb_0   = v0v2_0*v1v3_0;
    const  double lc_0   = v0v1_0*v2v3_0;
    const  double s_0    = 0.5*(la_0+lb_0+lc_0);
    const  double area_0 = std::sqrt(s_0*(s_0-la_0)*(s_0-lb_0)*(s_0-lc_0));
    const double circumradius_0 = area_0 / ( 6.0*volume_0 );
    // Compute circumradius
    const double v1v2_1  = std::sqrt( (vertex_coordinates_1[6] - vertex_coordinates_1[3])*(vertex_coordinates_1[6] - vertex_coordinates_1[3]) + (vertex_coordinates_1[7] - vertex_coordinates_1[4])*(vertex_coordinates_1[7] - vertex_coordinates_1[4]) + (vertex_coordinates_1[8] - vertex_coordinates_1[5])*(vertex_coordinates_1[8] - vertex_coordinates_1[5]) );
    const double v0v2_1  = std::sqrt(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7]);
    const double v0v1_1  = std::sqrt(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6]);
    const double v0v3_1  = std::sqrt(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8]);
    const double v1v3_1  = std::sqrt( (vertex_coordinates_1[9] - vertex_coordinates_1[3])*(vertex_coordinates_1[9] - vertex_coordinates_1[3]) + (vertex_coordinates_1[10] - vertex_coordinates_1[4])*(vertex_coordinates_1[10] - vertex_coordinates_1[4]) + (vertex_coordinates_1[11] - vertex_coordinates_1[5])*(vertex_coordinates_1[11] - vertex_coordinates_1[5]) );
    const double v2v3_1  = std::sqrt( (vertex_coordinates_1[9] - vertex_coordinates_1[6])*(vertex_coordinates_1[9] - vertex_coordinates_1[6]) + (vertex_coordinates_1[10] - vertex_coordinates_1[7])*(vertex_coordinates_1[10] - vertex_coordinates_1[7]) + (vertex_coordinates_1[11] - vertex_coordinates_1[8])*(vertex_coordinates_1[11] - vertex_coordinates_1[8]) );
    const  double la_1   = v1v2_1*v0v3_1;
    const  double lb_1   = v0v2_1*v1v3_1;
    const  double lc_1   = v0v1_1*v2v3_1;
    const  double s_1    = 0.5*(la_1+lb_1+lc_1);
    const  double area_1 = std::sqrt(s_1*(s_1-la_1)*(s_1-lb_1)*(s_1-lc_1));
    const double circumradius_1 = area_1 / ( 6.0*volume_1 );
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Values of basis functions at quadrature points.
    static const double FE1_f0_C0[3][4] = \
    {{-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc21[4] = {0, 1, 2, 3};
    
    static const double FE1_f0_C0_D100[3][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc22[4] = {0, 1, 2, 3};
    
    static const double FE1_f0_C1[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666667, 0.333333333333333, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc23[4] = {0, 1, 2, 3};
    
    static const double FE1_f0_C2[3][4] = \
    {{-0.166666666666667, 0.166666666666666, -0.166666666666666, -0.833333333333333},
    {-0.666666666666666, 0.666666666666666, -0.666666666666666, -0.333333333333334},
    {-0.166666666666667, 0.166666666666666, -0.166666666666666, -0.833333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc24[4] = {0, 1, 2, 3};
    
    static const double FE1_f1_C0[3][1] = \
    {{-1.0},
    {-1.0},
    {-1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc29[1] = {1};
    
    // Array of non-zero columns
    static const unsigned int nzc35[1] = {3};
    
    static const double FE1_f2_C0[3][4] = \
    {{-0.166666666666666, -0.833333333333334, -0.166666666666666, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc31[4] = {0, 1, 2, 3};
    
    static const double FE1_f3_C1[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666666, 0.666666666666667, 0.333333333333333, 0.666666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc34[4] = {0, 1, 2, 3};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 16; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 5253.
    double G[57];
    G[0] = -2.0*det*w[12][0]*w[13][0]*(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[1] = -2.0*det*w[12][0]*w[13][0]*(J_1[0]*J_1[1] + J_1[3]*J_1[4] + J_1[6]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[2] = 2.0*det*w[12][0]*w[13][0]*(J_0[1]*J_1[0] + J_0[4]*J_1[3] + J_0[7]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[3] = 2.0*det*w[12][0]*w[13][0]*(J_0[2]*J_1[0] + J_0[5]*J_1[3] + J_0[8]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[4] = det*w[12][0]*w[13][0]*(0.5*(n_00*(J_1[3]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[0]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[0]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[3]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + J_1[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[5] = det*w[12][0]*w[13][0]*(0.5*(J_1[0]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + J_1[3]*(J_1[0]*K_1[0]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + J_1[6]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[0]*K_1[0] + J_1[3]*K_1[1]))) + J_1[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[6] = -2.0*det*w[12][0]*w[13][0]*(J_1[0]*J_1[2] + J_1[3]*J_1[5] + J_1[6]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[7] = 2.0*det*w[12][0]*w[13][0]*(J_0[0]*J_1[0] + J_0[3]*J_1[3] + J_0[6]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[8] = det*w[12][0]*w[13][0]*(0.5*(J_1[1]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[8]*K_1[6])) + J_1[4]*(J_1[1]*K_1[3]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[8]*K_1[7])) + J_1[7]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[1]*K_1[3] + J_1[4]*K_1[4]))) + J_1[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[9] = det*w[12][0]*w[13][0]*(-0.5*(n_00*(J_0[4]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[1]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[1]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[4]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) - (J_0[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[10] = det*w[12][0]*w[13][0]*(-0.5*(n_00*(J_0[5]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[2]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[2]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[5]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) - (J_0[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[11] = det*w[12][0]*w[13][0]*(0.5*(J_1[2]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3])) + J_1[5]*(J_1[2]*K_1[6]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4])) + J_1[8]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[2]*K_1[6] + J_1[5]*K_1[7]))) + J_1[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[12] = det*w[12][0]*w[13][0]*(-0.5*(n_00*(J_0[3]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[0]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[0]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[3]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) - (J_0[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[13] = -2.0*det*w[12][0]*w[13][0]*(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[14] = 2.0*det*w[12][0]*w[13][0]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[15] = 2.0*det*w[12][0]*w[13][0]*(J_0[2]*J_1[1] + J_0[5]*J_1[4] + J_0[8]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[16] = det*w[12][0]*w[13][0]*(0.5*(n_00*(J_1[4]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[1]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[1]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[4]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + J_1[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[17] = -2.0*det*w[12][0]*w[13][0]*(J_1[1]*J_1[2] + J_1[4]*J_1[5] + J_1[7]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[18] = 2.0*det*w[12][0]*w[13][0]*(J_0[0]*J_1[1] + J_0[3]*J_1[4] + J_0[6]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[19] = 2.0*det*w[12][0]*w[13][0]*(J_0[1]*J_1[2] + J_0[4]*J_1[5] + J_0[7]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[20] = 2.0*det*w[12][0]*w[13][0]*(J_0[2]*J_1[2] + J_0[5]*J_1[5] + J_0[8]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[21] = det*w[12][0]*w[13][0]*(0.5*(n_00*(J_1[5]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[2]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[2]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[5]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + J_1[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[22] = -2.0*det*w[12][0]*w[13][0]*(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[23] = 2.0*det*w[12][0]*w[13][0]*(J_0[0]*J_1[2] + J_0[3]*J_1[5] + J_0[6]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[24] = -2.0*det*w[12][0]*w[13][0]*(J_0[0]*J_0[1] + J_0[3]*J_0[4] + J_0[6]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[25] = -2.0*det*w[12][0]*w[13][0]*(J_0[0]*J_0[2] + J_0[3]*J_0[5] + J_0[6]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[26] = det*w[12][0]*w[13][0]*(-0.5*(J_0[0]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + J_0[3]*(J_0[0]*K_0[0]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + J_0[6]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[0]*K_0[0] + J_0[3]*K_0[1]))) - (J_0[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[27] = -2.0*det*w[12][0]*w[13][0]*(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[28] = det*w[12][0]*w[13][0]*(-0.5*(J_0[1]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[8]*K_0[6])) + J_0[4]*(J_0[1]*K_0[3]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[8]*K_0[7])) + J_0[7]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[1]*K_0[3] + J_0[4]*K_0[4]))) - (J_0[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[29] = det*w[12][0]*w[13][0]*(-0.5*(J_0[2]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3])) + J_0[5]*(J_0[2]*K_0[6]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4])) + J_0[8]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[2]*K_0[6] + J_0[5]*K_0[7]))) - (J_0[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[30] = -2.0*det*w[12][0]*w[13][0]*(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[31] = -2.0*det*w[12][0]*w[13][0]*(J_0[1]*J_0[2] + J_0[4]*J_0[5] + J_0[7]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[32] = -2.0*det*w[12][0]*w[13][0]*(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[33] = -2.0*det*w[12][0]*w[13][0]*(w[0][6]*(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7]) + w[7][6]*(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7]))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[34] = det*w[12][0]*w[13][0]*(0.5*(w[0][6]*(J_1[1]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[8]*K_1[6])) + J_1[4]*(J_1[1]*K_1[3]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[8]*K_1[7])) + J_1[7]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[1]*K_1[3] + J_1[4]*K_1[4]))) + w[7][6]*(J_1[1]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[8]*K_1[6])) + J_1[4]*(J_1[1]*K_1[3]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[8]*K_1[7])) + J_1[7]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[1]*K_1[3] + J_1[4]*K_1[4])))) + J_1[1]*n_00*(w[0][6]*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + w[7][6]*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6])) + J_1[4]*n_01*(w[0][6]*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + w[7][6]*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7])) + J_1[7]*n_02*(w[0][6]*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]) + w[7][6]*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[35] = -2.0*det*w[12][0]*w[13][0]*(w[0][6]*(J_1[1]*J_1[2] + J_1[4]*J_1[5] + J_1[7]*J_1[8]) + w[7][6]*(J_1[1]*J_1[2] + J_1[4]*J_1[5] + J_1[7]*J_1[8]))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[36] = -2.0*det*w[12][0]*w[13][0]*(w[0][6]*(J_1[0]*J_1[1] + J_1[3]*J_1[4] + J_1[6]*J_1[7]) + w[7][6]*(J_1[0]*J_1[1] + J_1[3]*J_1[4] + J_1[6]*J_1[7]))/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[37] = 2.0*det*w[12][0]*w[13][0]*(w[0][6]*(J_0[0]*J_1[1] + J_0[3]*J_1[4] + J_0[6]*J_1[7]) + w[7][6]*(J_0[0]*J_1[1] + J_0[3]*J_1[4] + J_0[6]*J_1[7]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[38] = det*w[12][0]*w[13][0]*(0.5*(w[0][6]*(n_00*(J_1[4]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[1]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[1]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[4]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + w[7][6]*(n_00*(J_1[4]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[1]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[1]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[4]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])))) + J_1[1]*n_00*(w[0][6]*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + w[7][6]*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6])) + J_1[4]*n_01*(w[0][6]*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + w[7][6]*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7])) + J_1[7]*n_02*(w[0][6]*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]) + w[7][6]*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[39] = 2.0*det*w[12][0]*w[13][0]*(w[0][6]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7]) + w[7][6]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[40] = 2.0*det*w[12][0]*w[13][0]*(w[0][6]*(J_0[2]*J_1[1] + J_0[5]*J_1[4] + J_0[8]*J_1[7]) + w[7][6]*(J_0[2]*J_1[1] + J_0[5]*J_1[4] + J_0[8]*J_1[7]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[41] = -2.0*det*w[12][0]*w[13][0]*(w[0][2]*(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7]) + w[7][2]*(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7]))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[42] = 2.0*det*w[12][0]*w[13][0]*(w[0][2]*(J_0[1]*J_1[0] + J_0[4]*J_1[3] + J_0[7]*J_1[6]) + w[7][2]*(J_0[1]*J_1[0] + J_0[4]*J_1[3] + J_0[7]*J_1[6]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[43] = det*w[12][0]*w[13][0]*(-0.5*(w[0][2]*(n_00*(J_0[4]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[1]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[1]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[4]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) + w[7][2]*(n_00*(J_0[4]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[1]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[1]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[4]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])))) - (J_0[1]*n_00*(w[0][2]*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + w[7][2]*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6])) + J_0[4]*n_01*(w[0][2]*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + w[7][2]*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7])) + J_0[7]*n_02*(w[0][2]*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]) + w[7][2]*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[44] = 2.0*det*w[12][0]*w[13][0]*(w[0][2]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7]) + w[7][2]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[45] = 2.0*det*w[12][0]*w[13][0]*(w[0][2]*(J_0[1]*J_1[2] + J_0[4]*J_1[5] + J_0[7]*J_1[8]) + w[7][2]*(J_0[1]*J_1[2] + J_0[4]*J_1[5] + J_0[7]*J_1[8]))/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[46] = det*w[12][0]*w[13][0]*(-0.5*(w[0][2]*(J_0[1]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[8]*K_0[6])) + J_0[4]*(J_0[1]*K_0[3]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[8]*K_0[7])) + J_0[7]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[1]*K_0[3] + J_0[4]*K_0[4]))) + w[7][2]*(J_0[1]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[8]*K_0[6])) + J_0[4]*(J_0[1]*K_0[3]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[8]*K_0[7])) + J_0[7]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[1]*K_0[3] + J_0[4]*K_0[4])))) - (J_0[1]*n_00*(w[0][2]*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + w[7][2]*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6])) + J_0[4]*n_01*(w[0][2]*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + w[7][2]*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7])) + J_0[7]*n_02*(w[0][2]*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]) + w[7][2]*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[47] = -2.0*det*w[12][0]*w[13][0]*(w[0][2]*(J_0[1]*J_0[2] + J_0[4]*J_0[5] + J_0[7]*J_0[8]) + w[7][2]*(J_0[1]*J_0[2] + J_0[4]*J_0[5] + J_0[7]*J_0[8]))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[48] = -2.0*det*w[12][0]*w[13][0]*(w[0][2]*(J_0[0]*J_0[1] + J_0[3]*J_0[4] + J_0[6]*J_0[7]) + w[7][2]*(J_0[0]*J_0[1] + J_0[3]*J_0[4] + J_0[6]*J_0[7]))/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[49] = det*w[12][0]*w[13][0]*((-2.0*J_1[1]*J_1[1]*w[0][6]-2.0*J_1[1]*J_1[1]*w[7][6]-2.0*J_1[4]*J_1[4]*w[0][6]-2.0*J_1[4]*J_1[4]*w[7][6]-2.0*J_1[7]*J_1[7]*w[0][6]-2.0*J_1[7]*J_1[7]*w[7][6])/(circumradius_0*detJ_1*detJ_1 + circumradius_1*detJ_1*detJ_1) + (2.0*J_0[1]*J_1[1]*w[0][2] + 2.0*J_0[1]*J_1[1]*w[7][2] + 2.0*J_0[4]*J_1[4]*w[0][2] + 2.0*J_0[4]*J_1[4]*w[7][2] + 2.0*J_0[7]*J_1[7]*w[0][2] + 2.0*J_0[7]*J_1[7]*w[7][2])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[50] = det*w[12][0]*w[13][0]*((-2.0*J_0[1]*J_0[1]*w[0][2]-2.0*J_0[1]*J_0[1]*w[7][2]-2.0*J_0[4]*J_0[4]*w[0][2]-2.0*J_0[4]*J_0[4]*w[7][2]-2.0*J_0[7]*J_0[7]*w[0][2]-2.0*J_0[7]*J_0[7]*w[7][2])/(circumradius_0*detJ_0*detJ_0 + circumradius_1*detJ_0*detJ_0) + (2.0*J_0[1]*J_1[1]*w[0][6] + 2.0*J_0[1]*J_1[1]*w[7][6] + 2.0*J_0[4]*J_1[4]*w[0][6] + 2.0*J_0[4]*J_1[4]*w[7][6] + 2.0*J_0[7]*J_1[7]*w[0][6] + 2.0*J_0[7]*J_1[7]*w[7][6])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[51] = det*w[12][0]*w[13][0]*((-0.5*J_0[1]*J_1[0]*K_1[1]*n_01*w[0][2]-0.5*J_0[1]*J_1[0]*K_1[1]*n_01*w[7][2]-0.5*J_0[1]*J_1[0]*K_1[2]*n_02*w[0][2]-0.5*J_0[1]*J_1[0]*K_1[2]*n_02*w[7][2]-0.5*J_0[1]*J_1[1]*K_1[4]*n_01*w[0][2]-0.5*J_0[1]*J_1[1]*K_1[4]*n_01*w[7][2]-0.5*J_0[1]*J_1[1]*K_1[5]*n_02*w[0][2]-0.5*J_0[1]*J_1[1]*K_1[5]*n_02*w[7][2]-0.5*J_0[1]*J_1[2]*K_1[7]*n_01*w[0][2]-0.5*J_0[1]*J_1[2]*K_1[7]*n_01*w[7][2]-0.5*J_0[1]*J_1[2]*K_1[8]*n_02*w[0][2]-0.5*J_0[1]*J_1[2]*K_1[8]*n_02*w[7][2]-0.5*J_0[1]*J_1[3]*K_1[0]*n_01*w[0][2]-0.5*J_0[1]*J_1[3]*K_1[0]*n_01*w[7][2]-0.5*J_0[1]*J_1[4]*K_1[3]*n_01*w[0][2]-0.5*J_0[1]*J_1[4]*K_1[3]*n_01*w[7][2]-0.5*J_0[1]*J_1[5]*K_1[6]*n_01*w[0][2]-0.5*J_0[1]*J_1[5]*K_1[6]*n_01*w[7][2]-0.5*J_0[1]*J_1[6]*K_1[0]*n_02*w[0][2]-0.5*J_0[1]*J_1[6]*K_1[0]*n_02*w[7][2]-0.5*J_0[1]*J_1[7]*K_1[3]*n_02*w[0][2]-0.5*J_0[1]*J_1[7]*K_1[3]*n_02*w[7][2]-0.5*J_0[1]*J_1[8]*K_1[6]*n_02*w[0][2]-0.5*J_0[1]*J_1[8]*K_1[6]*n_02*w[7][2]-0.5*J_0[4]*J_1[0]*K_1[1]*n_00*w[0][2]-0.5*J_0[4]*J_1[0]*K_1[1]*n_00*w[7][2]-0.5*J_0[4]*J_1[1]*K_1[4]*n_00*w[0][2]-0.5*J_0[4]*J_1[1]*K_1[4]*n_00*w[7][2]-0.5*J_0[4]*J_1[2]*K_1[7]*n_00*w[0][2]-0.5*J_0[4]*J_1[2]*K_1[7]*n_00*w[7][2]-0.5*J_0[4]*J_1[3]*K_1[0]*n_00*w[0][2]-0.5*J_0[4]*J_1[3]*K_1[0]*n_00*w[7][2]-0.5*J_0[4]*J_1[3]*K_1[2]*n_02*w[0][2]-0.5*J_0[4]*J_1[3]*K_1[2]*n_02*w[7][2]-0.5*J_0[4]*J_1[4]*K_1[3]*n_00*w[0][2]-0.5*J_0[4]*J_1[4]*K_1[3]*n_00*w[7][2]-0.5*J_0[4]*J_1[4]*K_1[5]*n_02*w[0][2]-0.5*J_0[4]*J_1[4]*K_1[5]*n_02*w[7][2]-0.5*J_0[4]*J_1[5]*K_1[6]*n_00*w[0][2]-0.5*J_0[4]*J_1[5]*K_1[6]*n_00*w[7][2]-0.5*J_0[4]*J_1[5]*K_1[8]*n_02*w[0][2]-0.5*J_0[4]*J_1[5]*K_1[8]*n_02*w[7][2]-0.5*J_0[4]*J_1[6]*K_1[1]*n_02*w[0][2]-0.5*J_0[4]*J_1[6]*K_1[1]*n_02*w[7][2]-0.5*J_0[4]*J_1[7]*K_1[4]*n_02*w[0][2]-0.5*J_0[4]*J_1[7]*K_1[4]*n_02*w[7][2]-0.5*J_0[4]*J_1[8]*K_1[7]*n_02*w[0][2]-0.5*J_0[4]*J_1[8]*K_1[7]*n_02*w[7][2]-0.5*J_0[7]*J_1[0]*K_1[2]*n_00*w[0][2]-0.5*J_0[7]*J_1[0]*K_1[2]*n_00*w[7][2]-0.5*J_0[7]*J_1[1]*K_1[5]*n_00*w[0][2]-0.5*J_0[7]*J_1[1]*K_1[5]*n_00*w[7][2]-0.5*J_0[7]*J_1[2]*K_1[8]*n_00*w[0][2]-0.5*J_0[7]*J_1[2]*K_1[8]*n_00*w[7][2]-0.5*J_0[7]*J_1[3]*K_1[2]*n_01*w[0][2]-0.5*J_0[7]*J_1[3]*K_1[2]*n_01*w[7][2]-0.5*J_0[7]*J_1[4]*K_1[5]*n_01*w[0][2]-0.5*J_0[7]*J_1[4]*K_1[5]*n_01*w[7][2]-0.5*J_0[7]*J_1[5]*K_1[8]*n_01*w[0][2]-0.5*J_0[7]*J_1[5]*K_1[8]*n_01*w[7][2]-0.5*J_0[7]*J_1[6]*K_1[0]*n_00*w[0][2]-0.5*J_0[7]*J_1[6]*K_1[0]*n_00*w[7][2]-0.5*J_0[7]*J_1[6]*K_1[1]*n_01*w[0][2]-0.5*J_0[7]*J_1[6]*K_1[1]*n_01*w[7][2]-0.5*J_0[7]*J_1[7]*K_1[3]*n_00*w[0][2]-0.5*J_0[7]*J_1[7]*K_1[3]*n_00*w[7][2]-0.5*J_0[7]*J_1[7]*K_1[4]*n_01*w[0][2]-0.5*J_0[7]*J_1[7]*K_1[4]*n_01*w[7][2]-0.5*J_0[7]*J_1[8]*K_1[6]*n_00*w[0][2]-0.5*J_0[7]*J_1[8]*K_1[6]*n_00*w[7][2]-0.5*J_0[7]*J_1[8]*K_1[7]*n_01*w[0][2]-0.5*J_0[7]*J_1[8]*K_1[7]*n_01*w[7][2] - J_0[1]*J_1[0]*K_1[0]*n_00*w[0][2] - J_0[1]*J_1[0]*K_1[0]*n_00*w[7][2] - J_0[1]*J_1[1]*K_1[3]*n_00*w[0][2] - J_0[1]*J_1[1]*K_1[3]*n_00*w[7][2] - J_0[1]*J_1[2]*K_1[6]*n_00*w[0][2] - J_0[1]*J_1[2]*K_1[6]*n_00*w[7][2] - J_0[4]*J_1[3]*K_1[1]*n_01*w[0][2] - J_0[4]*J_1[3]*K_1[1]*n_01*w[7][2] - J_0[4]*J_1[4]*K_1[4]*n_01*w[0][2] - J_0[4]*J_1[4]*K_1[4]*n_01*w[7][2] - J_0[4]*J_1[5]*K_1[7]*n_01*w[0][2] - J_0[4]*J_1[5]*K_1[7]*n_01*w[7][2] - J_0[7]*J_1[6]*K_1[2]*n_02*w[0][2] - J_0[7]*J_1[6]*K_1[2]*n_02*w[7][2] - J_0[7]*J_1[7]*K_1[5]*n_02*w[0][2] - J_0[7]*J_1[7]*K_1[5]*n_02*w[7][2] - J_0[7]*J_1[8]*K_1[8]*n_02*w[0][2] - J_0[7]*J_1[8]*K_1[8]*n_02*w[7][2])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1) + (0.5*J_1[0]*J_1[1]*K_1[1]*n_01*w[0][6] + 0.5*J_1[0]*J_1[1]*K_1[1]*n_01*w[7][6] + 0.5*J_1[0]*J_1[1]*K_1[2]*n_02*w[0][6] + 0.5*J_1[0]*J_1[1]*K_1[2]*n_02*w[7][6] + 0.5*J_1[0]*J_1[4]*K_1[1]*n_00*w[0][6] + 0.5*J_1[0]*J_1[4]*K_1[1]*n_00*w[7][6] + 0.5*J_1[0]*J_1[7]*K_1[2]*n_00*w[0][6] + 0.5*J_1[0]*J_1[7]*K_1[2]*n_00*w[7][6] + 0.5*J_1[1]*J_1[1]*K_1[4]*n_01*w[0][6] + 0.5*J_1[1]*J_1[1]*K_1[4]*n_01*w[7][6] + 0.5*J_1[1]*J_1[1]*K_1[5]*n_02*w[0][6] + 0.5*J_1[1]*J_1[1]*K_1[5]*n_02*w[7][6] + 0.5*J_1[1]*J_1[2]*K_1[7]*n_01*w[0][6] + 0.5*J_1[1]*J_1[2]*K_1[7]*n_01*w[7][6] + 0.5*J_1[1]*J_1[2]*K_1[8]*n_02*w[0][6] + 0.5*J_1[1]*J_1[2]*K_1[8]*n_02*w[7][6] + 0.5*J_1[1]*J_1[3]*K_1[0]*n_01*w[0][6] + 0.5*J_1[1]*J_1[3]*K_1[0]*n_01*w[7][6] + 0.5*J_1[1]*J_1[4]*K_1[3]*n_01*w[0][6] + 0.5*J_1[1]*J_1[4]*K_1[3]*n_01*w[7][6] + 0.5*J_1[1]*J_1[4]*K_1[4]*n_00*w[0][6] + 0.5*J_1[1]*J_1[4]*K_1[4]*n_00*w[7][6] + 0.5*J_1[1]*J_1[5]*K_1[6]*n_01*w[0][6] + 0.5*J_1[1]*J_1[5]*K_1[6]*n_01*w[7][6] + 0.5*J_1[1]*J_1[6]*K_1[0]*n_02*w[0][6] + 0.5*J_1[1]*J_1[6]*K_1[0]*n_02*w[7][6] + 0.5*J_1[1]*J_1[7]*K_1[3]*n_02*w[0][6] + 0.5*J_1[1]*J_1[7]*K_1[3]*n_02*w[7][6] + 0.5*J_1[1]*J_1[7]*K_1[5]*n_00*w[0][6] + 0.5*J_1[1]*J_1[7]*K_1[5]*n_00*w[7][6] + 0.5*J_1[1]*J_1[8]*K_1[6]*n_02*w[0][6] + 0.5*J_1[1]*J_1[8]*K_1[6]*n_02*w[7][6] + 0.5*J_1[2]*J_1[4]*K_1[7]*n_00*w[0][6] + 0.5*J_1[2]*J_1[4]*K_1[7]*n_00*w[7][6] + 0.5*J_1[2]*J_1[7]*K_1[8]*n_00*w[0][6] + 0.5*J_1[2]*J_1[7]*K_1[8]*n_00*w[7][6] + 0.5*J_1[3]*J_1[4]*K_1[0]*n_00*w[0][6] + 0.5*J_1[3]*J_1[4]*K_1[0]*n_00*w[7][6] + 0.5*J_1[3]*J_1[4]*K_1[2]*n_02*w[0][6] + 0.5*J_1[3]*J_1[4]*K_1[2]*n_02*w[7][6] + 0.5*J_1[3]*J_1[7]*K_1[2]*n_01*w[0][6] + 0.5*J_1[3]*J_1[7]*K_1[2]*n_01*w[7][6] + 0.5*J_1[4]*J_1[4]*K_1[3]*n_00*w[0][6] + 0.5*J_1[4]*J_1[4]*K_1[3]*n_00*w[7][6] + 0.5*J_1[4]*J_1[4]*K_1[5]*n_02*w[0][6] + 0.5*J_1[4]*J_1[4]*K_1[5]*n_02*w[7][6] + 0.5*J_1[4]*J_1[5]*K_1[6]*n_00*w[0][6] + 0.5*J_1[4]*J_1[5]*K_1[6]*n_00*w[7][6] + 0.5*J_1[4]*J_1[5]*K_1[8]*n_02*w[0][6] + 0.5*J_1[4]*J_1[5]*K_1[8]*n_02*w[7][6] + 0.5*J_1[4]*J_1[6]*K_1[1]*n_02*w[0][6] + 0.5*J_1[4]*J_1[6]*K_1[1]*n_02*w[7][6] + 0.5*J_1[4]*J_1[7]*K_1[4]*n_02*w[0][6] + 0.5*J_1[4]*J_1[7]*K_1[4]*n_02*w[7][6] + 0.5*J_1[4]*J_1[7]*K_1[5]*n_01*w[0][6] + 0.5*J_1[4]*J_1[7]*K_1[5]*n_01*w[7][6] + 0.5*J_1[4]*J_1[8]*K_1[7]*n_02*w[0][6] + 0.5*J_1[4]*J_1[8]*K_1[7]*n_02*w[7][6] + 0.5*J_1[5]*J_1[7]*K_1[8]*n_01*w[0][6] + 0.5*J_1[5]*J_1[7]*K_1[8]*n_01*w[7][6] + 0.5*J_1[6]*J_1[7]*K_1[0]*n_00*w[0][6] + 0.5*J_1[6]*J_1[7]*K_1[0]*n_00*w[7][6] + 0.5*J_1[6]*J_1[7]*K_1[1]*n_01*w[0][6] + 0.5*J_1[6]*J_1[7]*K_1[1]*n_01*w[7][6] + 0.5*J_1[7]*J_1[7]*K_1[3]*n_00*w[0][6] + 0.5*J_1[7]*J_1[7]*K_1[3]*n_00*w[7][6] + 0.5*J_1[7]*J_1[7]*K_1[4]*n_01*w[0][6] + 0.5*J_1[7]*J_1[7]*K_1[4]*n_01*w[7][6] + 0.5*J_1[7]*J_1[8]*K_1[6]*n_00*w[0][6] + 0.5*J_1[7]*J_1[8]*K_1[6]*n_00*w[7][6] + 0.5*J_1[7]*J_1[8]*K_1[7]*n_01*w[0][6] + 0.5*J_1[7]*J_1[8]*K_1[7]*n_01*w[7][6] + J_1[0]*J_1[1]*K_1[0]*n_00*w[0][6] + J_1[0]*J_1[1]*K_1[0]*n_00*w[7][6] + J_1[1]*J_1[1]*K_1[3]*n_00*w[0][6] + J_1[1]*J_1[1]*K_1[3]*n_00*w[7][6] + J_1[1]*J_1[2]*K_1[6]*n_00*w[0][6] + J_1[1]*J_1[2]*K_1[6]*n_00*w[7][6] + J_1[3]*J_1[4]*K_1[1]*n_01*w[0][6] + J_1[3]*J_1[4]*K_1[1]*n_01*w[7][6] + J_1[4]*J_1[4]*K_1[4]*n_01*w[0][6] + J_1[4]*J_1[4]*K_1[4]*n_01*w[7][6] + J_1[4]*J_1[5]*K_1[7]*n_01*w[0][6] + J_1[4]*J_1[5]*K_1[7]*n_01*w[7][6] + J_1[6]*J_1[7]*K_1[2]*n_02*w[0][6] + J_1[6]*J_1[7]*K_1[2]*n_02*w[7][6] + J_1[7]*J_1[7]*K_1[5]*n_02*w[0][6] + J_1[7]*J_1[7]*K_1[5]*n_02*w[7][6] + J_1[7]*J_1[8]*K_1[8]*n_02*w[0][6] + J_1[7]*J_1[8]*K_1[8]*n_02*w[7][6])/(circumradius_0*detJ_1*detJ_1 + circumradius_1*detJ_1*detJ_1));
    G[52] = det*w[12][0]*w[13][0]*((-2.0*J_1[1]*J_1[2]*w[0][6]-2.0*J_1[1]*J_1[2]*w[7][6]-2.0*J_1[4]*J_1[5]*w[0][6]-2.0*J_1[4]*J_1[5]*w[7][6]-2.0*J_1[7]*J_1[8]*w[0][6]-2.0*J_1[7]*J_1[8]*w[7][6])/(circumradius_0*detJ_1*detJ_1 + circumradius_1*detJ_1*detJ_1) + (2.0*J_0[1]*J_1[2]*w[0][2] + 2.0*J_0[1]*J_1[2]*w[7][2] + 2.0*J_0[4]*J_1[5]*w[0][2] + 2.0*J_0[4]*J_1[5]*w[7][2] + 2.0*J_0[7]*J_1[8]*w[0][2] + 2.0*J_0[7]*J_1[8]*w[7][2])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[53] = det*w[12][0]*w[13][0]*((-2.0*J_1[0]*J_1[1]*w[0][6]-2.0*J_1[0]*J_1[1]*w[7][6]-2.0*J_1[3]*J_1[4]*w[0][6]-2.0*J_1[3]*J_1[4]*w[7][6]-2.0*J_1[6]*J_1[7]*w[0][6]-2.0*J_1[6]*J_1[7]*w[7][6])/(circumradius_0*detJ_1*detJ_1 + circumradius_1*detJ_1*detJ_1) + (2.0*J_0[1]*J_1[0]*w[0][2] + 2.0*J_0[1]*J_1[0]*w[7][2] + 2.0*J_0[4]*J_1[3]*w[0][2] + 2.0*J_0[4]*J_1[3]*w[7][2] + 2.0*J_0[7]*J_1[6]*w[0][2] + 2.0*J_0[7]*J_1[6]*w[7][2])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[54] = det*w[12][0]*w[13][0]*((-0.5*J_0[0]*J_0[1]*K_0[1]*n_01*w[0][2]-0.5*J_0[0]*J_0[1]*K_0[1]*n_01*w[7][2]-0.5*J_0[0]*J_0[1]*K_0[2]*n_02*w[0][2]-0.5*J_0[0]*J_0[1]*K_0[2]*n_02*w[7][2]-0.5*J_0[0]*J_0[4]*K_0[1]*n_00*w[0][2]-0.5*J_0[0]*J_0[4]*K_0[1]*n_00*w[7][2]-0.5*J_0[0]*J_0[7]*K_0[2]*n_00*w[0][2]-0.5*J_0[0]*J_0[7]*K_0[2]*n_00*w[7][2]-0.5*J_0[1]*J_0[1]*K_0[4]*n_01*w[0][2]-0.5*J_0[1]*J_0[1]*K_0[4]*n_01*w[7][2]-0.5*J_0[1]*J_0[1]*K_0[5]*n_02*w[0][2]-0.5*J_0[1]*J_0[1]*K_0[5]*n_02*w[7][2]-0.5*J_0[1]*J_0[2]*K_0[7]*n_01*w[0][2]-0.5*J_0[1]*J_0[2]*K_0[7]*n_01*w[7][2]-0.5*J_0[1]*J_0[2]*K_0[8]*n_02*w[0][2]-0.5*J_0[1]*J_0[2]*K_0[8]*n_02*w[7][2]-0.5*J_0[1]*J_0[3]*K_0[0]*n_01*w[0][2]-0.5*J_0[1]*J_0[3]*K_0[0]*n_01*w[7][2]-0.5*J_0[1]*J_0[4]*K_0[3]*n_01*w[0][2]-0.5*J_0[1]*J_0[4]*K_0[3]*n_01*w[7][2]-0.5*J_0[1]*J_0[4]*K_0[4]*n_00*w[0][2]-0.5*J_0[1]*J_0[4]*K_0[4]*n_00*w[7][2]-0.5*J_0[1]*J_0[5]*K_0[6]*n_01*w[0][2]-0.5*J_0[1]*J_0[5]*K_0[6]*n_01*w[7][2]-0.5*J_0[1]*J_0[6]*K_0[0]*n_02*w[0][2]-0.5*J_0[1]*J_0[6]*K_0[0]*n_02*w[7][2]-0.5*J_0[1]*J_0[7]*K_0[3]*n_02*w[0][2]-0.5*J_0[1]*J_0[7]*K_0[3]*n_02*w[7][2]-0.5*J_0[1]*J_0[7]*K_0[5]*n_00*w[0][2]-0.5*J_0[1]*J_0[7]*K_0[5]*n_00*w[7][2]-0.5*J_0[1]*J_0[8]*K_0[6]*n_02*w[0][2]-0.5*J_0[1]*J_0[8]*K_0[6]*n_02*w[7][2]-0.5*J_0[2]*J_0[4]*K_0[7]*n_00*w[0][2]-0.5*J_0[2]*J_0[4]*K_0[7]*n_00*w[7][2]-0.5*J_0[2]*J_0[7]*K_0[8]*n_00*w[0][2]-0.5*J_0[2]*J_0[7]*K_0[8]*n_00*w[7][2]-0.5*J_0[3]*J_0[4]*K_0[0]*n_00*w[0][2]-0.5*J_0[3]*J_0[4]*K_0[0]*n_00*w[7][2]-0.5*J_0[3]*J_0[4]*K_0[2]*n_02*w[0][2]-0.5*J_0[3]*J_0[4]*K_0[2]*n_02*w[7][2]-0.5*J_0[3]*J_0[7]*K_0[2]*n_01*w[0][2]-0.5*J_0[3]*J_0[7]*K_0[2]*n_01*w[7][2]-0.5*J_0[4]*J_0[4]*K_0[3]*n_00*w[0][2]-0.5*J_0[4]*J_0[4]*K_0[3]*n_00*w[7][2]-0.5*J_0[4]*J_0[4]*K_0[5]*n_02*w[0][2]-0.5*J_0[4]*J_0[4]*K_0[5]*n_02*w[7][2]-0.5*J_0[4]*J_0[5]*K_0[6]*n_00*w[0][2]-0.5*J_0[4]*J_0[5]*K_0[6]*n_00*w[7][2]-0.5*J_0[4]*J_0[5]*K_0[8]*n_02*w[0][2]-0.5*J_0[4]*J_0[5]*K_0[8]*n_02*w[7][2]-0.5*J_0[4]*J_0[6]*K_0[1]*n_02*w[0][2]-0.5*J_0[4]*J_0[6]*K_0[1]*n_02*w[7][2]-0.5*J_0[4]*J_0[7]*K_0[4]*n_02*w[0][2]-0.5*J_0[4]*J_0[7]*K_0[4]*n_02*w[7][2]-0.5*J_0[4]*J_0[7]*K_0[5]*n_01*w[0][2]-0.5*J_0[4]*J_0[7]*K_0[5]*n_01*w[7][2]-0.5*J_0[4]*J_0[8]*K_0[7]*n_02*w[0][2]-0.5*J_0[4]*J_0[8]*K_0[7]*n_02*w[7][2]-0.5*J_0[5]*J_0[7]*K_0[8]*n_01*w[0][2]-0.5*J_0[5]*J_0[7]*K_0[8]*n_01*w[7][2]-0.5*J_0[6]*J_0[7]*K_0[0]*n_00*w[0][2]-0.5*J_0[6]*J_0[7]*K_0[0]*n_00*w[7][2]-0.5*J_0[6]*J_0[7]*K_0[1]*n_01*w[0][2]-0.5*J_0[6]*J_0[7]*K_0[1]*n_01*w[7][2]-0.5*J_0[7]*J_0[7]*K_0[3]*n_00*w[0][2]-0.5*J_0[7]*J_0[7]*K_0[3]*n_00*w[7][2]-0.5*J_0[7]*J_0[7]*K_0[4]*n_01*w[0][2]-0.5*J_0[7]*J_0[7]*K_0[4]*n_01*w[7][2]-0.5*J_0[7]*J_0[8]*K_0[6]*n_00*w[0][2]-0.5*J_0[7]*J_0[8]*K_0[6]*n_00*w[7][2]-0.5*J_0[7]*J_0[8]*K_0[7]*n_01*w[0][2]-0.5*J_0[7]*J_0[8]*K_0[7]*n_01*w[7][2] - J_0[0]*J_0[1]*K_0[0]*n_00*w[0][2] - J_0[0]*J_0[1]*K_0[0]*n_00*w[7][2] - J_0[1]*J_0[1]*K_0[3]*n_00*w[0][2] - J_0[1]*J_0[1]*K_0[3]*n_00*w[7][2] - J_0[1]*J_0[2]*K_0[6]*n_00*w[0][2] - J_0[1]*J_0[2]*K_0[6]*n_00*w[7][2] - J_0[3]*J_0[4]*K_0[1]*n_01*w[0][2] - J_0[3]*J_0[4]*K_0[1]*n_01*w[7][2] - J_0[4]*J_0[4]*K_0[4]*n_01*w[0][2] - J_0[4]*J_0[4]*K_0[4]*n_01*w[7][2] - J_0[4]*J_0[5]*K_0[7]*n_01*w[0][2] - J_0[4]*J_0[5]*K_0[7]*n_01*w[7][2] - J_0[6]*J_0[7]*K_0[2]*n_02*w[0][2] - J_0[6]*J_0[7]*K_0[2]*n_02*w[7][2] - J_0[7]*J_0[7]*K_0[5]*n_02*w[0][2] - J_0[7]*J_0[7]*K_0[5]*n_02*w[7][2] - J_0[7]*J_0[8]*K_0[8]*n_02*w[0][2] - J_0[7]*J_0[8]*K_0[8]*n_02*w[7][2])/(circumradius_0*detJ_0*detJ_0 + circumradius_1*detJ_0*detJ_0) + (0.5*J_0[0]*J_1[1]*K_0[1]*n_01*w[0][6] + 0.5*J_0[0]*J_1[1]*K_0[1]*n_01*w[7][6] + 0.5*J_0[0]*J_1[1]*K_0[2]*n_02*w[0][6] + 0.5*J_0[0]*J_1[1]*K_0[2]*n_02*w[7][6] + 0.5*J_0[0]*J_1[4]*K_0[1]*n_00*w[0][6] + 0.5*J_0[0]*J_1[4]*K_0[1]*n_00*w[7][6] + 0.5*J_0[0]*J_1[7]*K_0[2]*n_00*w[0][6] + 0.5*J_0[0]*J_1[7]*K_0[2]*n_00*w[7][6] + 0.5*J_0[1]*J_1[1]*K_0[4]*n_01*w[0][6] + 0.5*J_0[1]*J_1[1]*K_0[4]*n_01*w[7][6] + 0.5*J_0[1]*J_1[1]*K_0[5]*n_02*w[0][6] + 0.5*J_0[1]*J_1[1]*K_0[5]*n_02*w[7][6] + 0.5*J_0[1]*J_1[4]*K_0[4]*n_00*w[0][6] + 0.5*J_0[1]*J_1[4]*K_0[4]*n_00*w[7][6] + 0.5*J_0[1]*J_1[7]*K_0[5]*n_00*w[0][6] + 0.5*J_0[1]*J_1[7]*K_0[5]*n_00*w[7][6] + 0.5*J_0[2]*J_1[1]*K_0[7]*n_01*w[0][6] + 0.5*J_0[2]*J_1[1]*K_0[7]*n_01*w[7][6] + 0.5*J_0[2]*J_1[1]*K_0[8]*n_02*w[0][6] + 0.5*J_0[2]*J_1[1]*K_0[8]*n_02*w[7][6] + 0.5*J_0[2]*J_1[4]*K_0[7]*n_00*w[0][6] + 0.5*J_0[2]*J_1[4]*K_0[7]*n_00*w[7][6] + 0.5*J_0[2]*J_1[7]*K_0[8]*n_00*w[0][6] + 0.5*J_0[2]*J_1[7]*K_0[8]*n_00*w[7][6] + 0.5*J_0[3]*J_1[1]*K_0[0]*n_01*w[0][6] + 0.5*J_0[3]*J_1[1]*K_0[0]*n_01*w[7][6] + 0.5*J_0[3]*J_1[4]*K_0[0]*n_00*w[0][6] + 0.5*J_0[3]*J_1[4]*K_0[0]*n_00*w[7][6] + 0.5*J_0[3]*J_1[4]*K_0[2]*n_02*w[0][6] + 0.5*J_0[3]*J_1[4]*K_0[2]*n_02*w[7][6] + 0.5*J_0[3]*J_1[7]*K_0[2]*n_01*w[0][6] + 0.5*J_0[3]*J_1[7]*K_0[2]*n_01*w[7][6] + 0.5*J_0[4]*J_1[1]*K_0[3]*n_01*w[0][6] + 0.5*J_0[4]*J_1[1]*K_0[3]*n_01*w[7][6] + 0.5*J_0[4]*J_1[4]*K_0[3]*n_00*w[0][6] + 0.5*J_0[4]*J_1[4]*K_0[3]*n_00*w[7][6] + 0.5*J_0[4]*J_1[4]*K_0[5]*n_02*w[0][6] + 0.5*J_0[4]*J_1[4]*K_0[5]*n_02*w[7][6] + 0.5*J_0[4]*J_1[7]*K_0[5]*n_01*w[0][6] + 0.5*J_0[4]*J_1[7]*K_0[5]*n_01*w[7][6] + 0.5*J_0[5]*J_1[1]*K_0[6]*n_01*w[0][6] + 0.5*J_0[5]*J_1[1]*K_0[6]*n_01*w[7][6] + 0.5*J_0[5]*J_1[4]*K_0[6]*n_00*w[0][6] + 0.5*J_0[5]*J_1[4]*K_0[6]*n_00*w[7][6] + 0.5*J_0[5]*J_1[4]*K_0[8]*n_02*w[0][6] + 0.5*J_0[5]*J_1[4]*K_0[8]*n_02*w[7][6] + 0.5*J_0[5]*J_1[7]*K_0[8]*n_01*w[0][6] + 0.5*J_0[5]*J_1[7]*K_0[8]*n_01*w[7][6] + 0.5*J_0[6]*J_1[1]*K_0[0]*n_02*w[0][6] + 0.5*J_0[6]*J_1[1]*K_0[0]*n_02*w[7][6] + 0.5*J_0[6]*J_1[4]*K_0[1]*n_02*w[0][6] + 0.5*J_0[6]*J_1[4]*K_0[1]*n_02*w[7][6] + 0.5*J_0[6]*J_1[7]*K_0[0]*n_00*w[0][6] + 0.5*J_0[6]*J_1[7]*K_0[0]*n_00*w[7][6] + 0.5*J_0[6]*J_1[7]*K_0[1]*n_01*w[0][6] + 0.5*J_0[6]*J_1[7]*K_0[1]*n_01*w[7][6] + 0.5*J_0[7]*J_1[1]*K_0[3]*n_02*w[0][6] + 0.5*J_0[7]*J_1[1]*K_0[3]*n_02*w[7][6] + 0.5*J_0[7]*J_1[4]*K_0[4]*n_02*w[0][6] + 0.5*J_0[7]*J_1[4]*K_0[4]*n_02*w[7][6] + 0.5*J_0[7]*J_1[7]*K_0[3]*n_00*w[0][6] + 0.5*J_0[7]*J_1[7]*K_0[3]*n_00*w[7][6] + 0.5*J_0[7]*J_1[7]*K_0[4]*n_01*w[0][6] + 0.5*J_0[7]*J_1[7]*K_0[4]*n_01*w[7][6] + 0.5*J_0[8]*J_1[1]*K_0[6]*n_02*w[0][6] + 0.5*J_0[8]*J_1[1]*K_0[6]*n_02*w[7][6] + 0.5*J_0[8]*J_1[4]*K_0[7]*n_02*w[0][6] + 0.5*J_0[8]*J_1[4]*K_0[7]*n_02*w[7][6] + 0.5*J_0[8]*J_1[7]*K_0[6]*n_00*w[0][6] + 0.5*J_0[8]*J_1[7]*K_0[6]*n_00*w[7][6] + 0.5*J_0[8]*J_1[7]*K_0[7]*n_01*w[0][6] + 0.5*J_0[8]*J_1[7]*K_0[7]*n_01*w[7][6] + J_0[0]*J_1[1]*K_0[0]*n_00*w[0][6] + J_0[0]*J_1[1]*K_0[0]*n_00*w[7][6] + J_0[1]*J_1[1]*K_0[3]*n_00*w[0][6] + J_0[1]*J_1[1]*K_0[3]*n_00*w[7][6] + J_0[2]*J_1[1]*K_0[6]*n_00*w[0][6] + J_0[2]*J_1[1]*K_0[6]*n_00*w[7][6] + J_0[3]*J_1[4]*K_0[1]*n_01*w[0][6] + J_0[3]*J_1[4]*K_0[1]*n_01*w[7][6] + J_0[4]*J_1[4]*K_0[4]*n_01*w[0][6] + J_0[4]*J_1[4]*K_0[4]*n_01*w[7][6] + J_0[5]*J_1[4]*K_0[7]*n_01*w[0][6] + J_0[5]*J_1[4]*K_0[7]*n_01*w[7][6] + J_0[6]*J_1[7]*K_0[2]*n_02*w[0][6] + J_0[6]*J_1[7]*K_0[2]*n_02*w[7][6] + J_0[7]*J_1[7]*K_0[5]*n_02*w[0][6] + J_0[7]*J_1[7]*K_0[5]*n_02*w[7][6] + J_0[8]*J_1[7]*K_0[8]*n_02*w[0][6] + J_0[8]*J_1[7]*K_0[8]*n_02*w[7][6])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[55] = det*w[12][0]*w[13][0]*((-2.0*J_0[1]*J_0[2]*w[0][2]-2.0*J_0[1]*J_0[2]*w[7][2]-2.0*J_0[4]*J_0[5]*w[0][2]-2.0*J_0[4]*J_0[5]*w[7][2]-2.0*J_0[7]*J_0[8]*w[0][2]-2.0*J_0[7]*J_0[8]*w[7][2])/(circumradius_0*detJ_0*detJ_0 + circumradius_1*detJ_0*detJ_0) + (2.0*J_0[2]*J_1[1]*w[0][6] + 2.0*J_0[2]*J_1[1]*w[7][6] + 2.0*J_0[5]*J_1[4]*w[0][6] + 2.0*J_0[5]*J_1[4]*w[7][6] + 2.0*J_0[8]*J_1[7]*w[0][6] + 2.0*J_0[8]*J_1[7]*w[7][6])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[56] = det*w[12][0]*w[13][0]*((-2.0*J_0[0]*J_0[1]*w[0][2]-2.0*J_0[0]*J_0[1]*w[7][2]-2.0*J_0[3]*J_0[4]*w[0][2]-2.0*J_0[3]*J_0[4]*w[7][2]-2.0*J_0[6]*J_0[7]*w[0][2]-2.0*J_0[6]*J_0[7]*w[7][2])/(circumradius_0*detJ_0*detJ_0 + circumradius_1*detJ_0*detJ_0) + (2.0*J_0[0]*J_1[1]*w[0][6] + 2.0*J_0[0]*J_1[1]*w[7][6] + 2.0*J_0[3]*J_1[4]*w[0][6] + 2.0*J_0[3]*J_1[4]*w[7][6] + 2.0*J_0[6]*J_1[7]*w[0][6] + 2.0*J_0[6]*J_1[7]*w[7][6])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1116
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1116
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 128
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f0_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F3 += FE1_f0_C0[ip][r]*w[0][r];
            F4 += FE1_f0_C1[ip][r]*w[0][r];
            F5 += FE1_f0_C2[ip][r]*w[0][r];
            F6 += FE1_f0_C0[ip][r]*w[7][r + 4];
            F7 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F8 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F9 += FE1_f0_C0[ip][r]*w[7][r];
            F10 += FE1_f0_C1[ip][r]*w[7][r];
            F11 += FE1_f0_C2[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 18
          I[1] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[2] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          
          // Number of operations for primary indices: 64
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc21[j] + 8)] += FE1_f0_C0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc21[j]] += FE1_f0_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1062
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1062
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f1_C0[ip][0]*w[0][5];
            F6 += FE1_f1_C0[ip][0]*w[7][5];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 112
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F3 += FE1_f0_C0[ip][r]*w[0][r];
            F4 += FE1_f0_C1[ip][r]*w[0][r];
            F5 += FE1_f0_C2[ip][r]*w[0][r];
            F7 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F8 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F9 += FE1_f0_C0[ip][r]*w[7][r];
            F10 += FE1_f0_C1[ip][r]*w[7][r];
            F11 += FE1_f0_C2[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 18
          I[1] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[2] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 8)] += FE1_f1_C0[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc21[j]] += FE1_f0_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 999
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 999
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          
          // Total number of operations to compute function values = 112
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C0[ip][r]*w[0][r];
            F3 += FE1_f0_C1[ip][r]*w[0][r];
            F4 += FE1_f0_C2[ip][r]*w[0][r];
            F5 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F6 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F7 += FE1_f0_C0[ip][r]*w[7][r];
            F8 += FE1_f0_C1[ip][r]*w[7][r];
            F9 += FE1_f0_C2[ip][r]*w[7][r];
            F10 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F11 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F12 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 164
          double I[8];
          // Number of operations: 22
          I[0] = W3[ip]*(G[33] + G[14]*(F3 + F8) + G[15]*(F4 + F9) + G[16]*(F10 + F12) + G[17]*(F1 + F6) + G[18]*(F2 + F7) + G[1]*(F0 + F5) + G[8]*(F11 + F13));
          
          // Number of operations: 16
          I[1] = W3[ip]*(G[34] + G[10]*(F4 + F9) + G[11]*(F1 + F6) + G[12]*(F2 + F7) + G[5]*(F0 + F5) + G[9]*(F3 + F8));
          
          // Number of operations: 22
          I[2] = W3[ip]*(G[35] + G[11]*(F11 + F13) + G[19]*(F3 + F8) + G[20]*(F4 + F9) + G[21]*(F10 + F12) + G[22]*(F1 + F6) + G[23]*(F2 + F7) + G[6]*(F0 + F5));
          
          // Number of operations: 22
          I[3] = W3[ip]*(G[36] + G[0]*(F0 + F5) + G[2]*(F3 + F8) + G[3]*(F4 + F9) + G[4]*(F10 + F12) + G[5]*(F11 + F13) + G[6]*(F1 + F6) + G[7]*(F2 + F7));
          
          // Number of operations: 22
          I[4] = W3[ip]*(G[37] + G[12]*(F11 + F13) + G[23]*(F1 + F6) + G[24]*(F3 + F8) + G[25]*(F4 + F9) + G[26]*(F10 + F12) + G[27]*(F2 + F7) + G[7]*(F0 + F5));
          
          // Number of operations: 16
          I[5] = W3[ip]*(G[38] + G[21]*(F1 + F6) + G[26]*(F2 + F7) + G[28]*(F3 + F8) + G[29]*(F4 + F9) + G[4]*(F0 + F5));
          
          // Number of operations: 22
          I[6] = W3[ip]*(G[39] + G[19]*(F1 + F6) + G[24]*(F2 + F7) + G[28]*(F10 + F12) + G[2]*(F0 + F5) + G[30]*(F3 + F8) + G[31]*(F4 + F9) + G[9]*(F11 + F13));
          
          // Number of operations: 22
          I[7] = W3[ip]*(G[40] + G[10]*(F11 + F13) + G[20]*(F1 + F6) + G[25]*(F2 + F7) + G[29]*(F10 + F12) + G[31]*(F3 + F8) + G[32]*(F4 + F9) + G[3]*(F0 + F5));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[10] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc21[j]] += FE1_f0_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1062
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1062
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE1_f1_C0[ip][0]*w[0][7];
            F8 += FE1_f1_C0[ip][0]*w[7][7];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 112
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f3_C1[ip][r]*w[0][r + 4];
            F3 += FE1_f0_C0[ip][r]*w[0][r];
            F4 += FE1_f0_C1[ip][r]*w[0][r];
            F5 += FE1_f0_C2[ip][r]*w[0][r];
            F6 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F7 += FE1_f3_C1[ip][r]*w[7][r + 4];
            F9 += FE1_f0_C0[ip][r]*w[7][r];
            F10 += FE1_f0_C1[ip][r]*w[7][r];
            F11 += FE1_f0_C2[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 18
          I[1] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[2] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc35[j] + 8)] += FE1_f1_C0[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc34[j] + 8)] += FE1_f3_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc21[j]] += FE1_f0_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1062
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1062
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F3 += FE1_f1_C0[ip][0]*w[0][1];
            F9 += FE1_f1_C0[ip][0]*w[7][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 112
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f0_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F4 += FE1_f0_C1[ip][r]*w[0][r];
            F5 += FE1_f0_C2[ip][r]*w[0][r];
            F6 += FE1_f0_C0[ip][r]*w[7][r + 4];
            F7 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F8 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F10 += FE1_f0_C1[ip][r]*w[7][r];
            F11 += FE1_f0_C2[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 24
          I[1] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 18
          I[2] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE1_f1_C0[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc21[j] + 8)] += FE1_f0_C0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1008
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1008
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 8
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f1_C0[ip][0]*w[0][5];
            F3 += FE1_f1_C0[ip][0]*w[0][1];
            F6 += FE1_f1_C0[ip][0]*w[7][5];
            F9 += FE1_f1_C0[ip][0]*w[7][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F4 += FE1_f0_C1[ip][r]*w[0][r];
            F5 += FE1_f0_C2[ip][r]*w[0][r];
            F7 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F8 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F10 += FE1_f0_C1[ip][r]*w[7][r];
            F11 += FE1_f0_C2[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 24
          I[1] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 18
          I[2] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 8)] += FE1_f1_C0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 945
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 945
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE1_f1_C0[ip][0]*w[0][1];
            F7 += FE1_f1_C0[ip][0]*w[7][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F3 += FE1_f0_C1[ip][r]*w[0][r];
            F4 += FE1_f0_C2[ip][r]*w[0][r];
            F5 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F6 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F8 += FE1_f0_C1[ip][r]*w[7][r];
            F9 += FE1_f0_C2[ip][r]*w[7][r];
            F10 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F11 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F12 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 164
          double I[8];
          // Number of operations: 22
          I[0] = W3[ip]*(G[33] + G[14]*(F3 + F8) + G[15]*(F4 + F9) + G[16]*(F10 + F12) + G[17]*(F1 + F6) + G[18]*(F2 + F7) + G[1]*(F0 + F5) + G[8]*(F11 + F13));
          
          // Number of operations: 22
          I[1] = W3[ip]*(G[37] + G[12]*(F11 + F13) + G[23]*(F1 + F6) + G[24]*(F3 + F8) + G[25]*(F4 + F9) + G[26]*(F10 + F12) + G[27]*(F2 + F7) + G[7]*(F0 + F5));
          
          // Number of operations: 16
          I[2] = W3[ip]*(G[34] + G[10]*(F4 + F9) + G[11]*(F1 + F6) + G[12]*(F2 + F7) + G[5]*(F0 + F5) + G[9]*(F3 + F8));
          
          // Number of operations: 22
          I[3] = W3[ip]*(G[35] + G[11]*(F11 + F13) + G[19]*(F3 + F8) + G[20]*(F4 + F9) + G[21]*(F10 + F12) + G[22]*(F1 + F6) + G[23]*(F2 + F7) + G[6]*(F0 + F5));
          
          // Number of operations: 22
          I[4] = W3[ip]*(G[36] + G[0]*(F0 + F5) + G[2]*(F3 + F8) + G[3]*(F4 + F9) + G[4]*(F10 + F12) + G[5]*(F11 + F13) + G[6]*(F1 + F6) + G[7]*(F2 + F7));
          
          // Number of operations: 16
          I[5] = W3[ip]*(G[38] + G[21]*(F1 + F6) + G[26]*(F2 + F7) + G[28]*(F3 + F8) + G[29]*(F4 + F9) + G[4]*(F0 + F5));
          
          // Number of operations: 22
          I[6] = W3[ip]*(G[39] + G[19]*(F1 + F6) + G[24]*(F2 + F7) + G[28]*(F10 + F12) + G[2]*(F0 + F5) + G[30]*(F3 + F8) + G[31]*(F4 + F9) + G[9]*(F11 + F13));
          
          // Number of operations: 22
          I[7] = W3[ip]*(G[40] + G[10]*(F11 + F13) + G[20]*(F1 + F6) + G[25]*(F2 + F7) + G[29]*(F10 + F12) + G[31]*(F3 + F8) + G[32]*(F4 + F9) + G[3]*(F0 + F5));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[10] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1008
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1008
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 8
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE1_f1_C0[ip][0]*w[0][7];
            F3 += FE1_f1_C0[ip][0]*w[0][1];
            F8 += FE1_f1_C0[ip][0]*w[7][7];
            F9 += FE1_f1_C0[ip][0]*w[7][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f3_C1[ip][r]*w[0][r + 4];
            F4 += FE1_f0_C1[ip][r]*w[0][r];
            F5 += FE1_f0_C2[ip][r]*w[0][r];
            F6 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F7 += FE1_f3_C1[ip][r]*w[7][r + 4];
            F10 += FE1_f0_C1[ip][r]*w[7][r];
            F11 += FE1_f0_C2[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 24
          I[1] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 18
          I[2] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc35[j] + 8)] += FE1_f1_C0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc34[j] + 8)] += FE1_f3_C1[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc23[j]] += FE1_f0_C1[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 999
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 999
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          
          // Total number of operations to compute function values = 112
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f0_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F3 += FE1_f2_C0[ip][r]*w[0][r];
            F4 += FE1_f0_C2[ip][r]*w[0][r];
            F5 += FE1_f0_C0[ip][r]*w[7][r + 4];
            F6 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F7 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F8 += FE1_f2_C0[ip][r]*w[7][r];
            F9 += FE1_f0_C2[ip][r]*w[7][r];
            F10 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F11 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F12 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 164
          double I[8];
          // Number of operations: 22
          I[0] = W3[ip]*(G[41] + G[14]*(F1 + F6) + G[19]*(F2 + F7) + G[24]*(F3 + F8) + G[28]*(F10 + F12) + G[2]*(F0 + F5) + G[31]*(F4 + F9) + G[9]*(F11 + F13));
          
          // Number of operations: 22
          I[1] = W3[ip]*(G[42] + G[0]*(F0 + F5) + G[1]*(F1 + F6) + G[3]*(F4 + F9) + G[4]*(F10 + F12) + G[5]*(F11 + F13) + G[6]*(F2 + F7) + G[7]*(F3 + F8));
          
          // Number of operations: 16
          I[2] = W3[ip]*(G[43] + G[10]*(F4 + F9) + G[11]*(F2 + F7) + G[12]*(F3 + F8) + G[5]*(F0 + F5) + G[8]*(F1 + F6));
          
          // Number of operations: 22
          I[3] = W3[ip]*(G[44] + G[13]*(F1 + F6) + G[15]*(F4 + F9) + G[16]*(F10 + F12) + G[17]*(F2 + F7) + G[18]*(F3 + F8) + G[1]*(F0 + F5) + G[8]*(F11 + F13));
          
          // Number of operations: 22
          I[4] = W3[ip]*(G[45] + G[11]*(F11 + F13) + G[17]*(F1 + F6) + G[20]*(F4 + F9) + G[21]*(F10 + F12) + G[22]*(F2 + F7) + G[23]*(F3 + F8) + G[6]*(F0 + F5));
          
          // Number of operations: 16
          I[5] = W3[ip]*(G[46] + G[16]*(F1 + F6) + G[21]*(F2 + F7) + G[26]*(F3 + F8) + G[29]*(F4 + F9) + G[4]*(F0 + F5));
          
          // Number of operations: 22
          I[6] = W3[ip]*(G[47] + G[10]*(F11 + F13) + G[15]*(F1 + F6) + G[20]*(F2 + F7) + G[25]*(F3 + F8) + G[29]*(F10 + F12) + G[32]*(F4 + F9) + G[3]*(F0 + F5));
          
          // Number of operations: 22
          I[7] = W3[ip]*(G[48] + G[12]*(F11 + F13) + G[18]*(F1 + F6) + G[23]*(F2 + F7) + G[25]*(F4 + F9) + G[26]*(F10 + F12) + G[27]*(F3 + F8) + G[7]*(F0 + F5));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[2] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc21[j] + 8)] += FE1_f0_C0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 945
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 945
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f1_C0[ip][0]*w[0][5];
            F5 += FE1_f1_C0[ip][0]*w[7][5];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F3 += FE1_f2_C0[ip][r]*w[0][r];
            F4 += FE1_f0_C2[ip][r]*w[0][r];
            F6 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F7 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F8 += FE1_f2_C0[ip][r]*w[7][r];
            F9 += FE1_f0_C2[ip][r]*w[7][r];
            F10 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F11 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F12 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 164
          double I[8];
          // Number of operations: 22
          I[0] = W3[ip]*(G[41] + G[14]*(F1 + F6) + G[19]*(F2 + F7) + G[24]*(F3 + F8) + G[28]*(F10 + F12) + G[2]*(F0 + F5) + G[31]*(F4 + F9) + G[9]*(F11 + F13));
          
          // Number of operations: 22
          I[1] = W3[ip]*(G[42] + G[0]*(F0 + F5) + G[1]*(F1 + F6) + G[3]*(F4 + F9) + G[4]*(F10 + F12) + G[5]*(F11 + F13) + G[6]*(F2 + F7) + G[7]*(F3 + F8));
          
          // Number of operations: 16
          I[2] = W3[ip]*(G[43] + G[10]*(F4 + F9) + G[11]*(F2 + F7) + G[12]*(F3 + F8) + G[5]*(F0 + F5) + G[8]*(F1 + F6));
          
          // Number of operations: 22
          I[3] = W3[ip]*(G[44] + G[13]*(F1 + F6) + G[15]*(F4 + F9) + G[16]*(F10 + F12) + G[17]*(F2 + F7) + G[18]*(F3 + F8) + G[1]*(F0 + F5) + G[8]*(F11 + F13));
          
          // Number of operations: 22
          I[4] = W3[ip]*(G[45] + G[11]*(F11 + F13) + G[17]*(F1 + F6) + G[20]*(F4 + F9) + G[21]*(F10 + F12) + G[22]*(F2 + F7) + G[23]*(F3 + F8) + G[6]*(F0 + F5));
          
          // Number of operations: 16
          I[5] = W3[ip]*(G[46] + G[16]*(F1 + F6) + G[21]*(F2 + F7) + G[26]*(F3 + F8) + G[29]*(F4 + F9) + G[4]*(F0 + F5));
          
          // Number of operations: 22
          I[6] = W3[ip]*(G[47] + G[10]*(F11 + F13) + G[15]*(F1 + F6) + G[20]*(F2 + F7) + G[25]*(F3 + F8) + G[29]*(F10 + F12) + G[32]*(F4 + F9) + G[3]*(F0 + F5));
          
          // Number of operations: 22
          I[7] = W3[ip]*(G[48] + G[12]*(F11 + F13) + G[18]*(F1 + F6) + G[23]*(F2 + F7) + G[25]*(F4 + F9) + G[26]*(F10 + F12) + G[27]*(F3 + F8) + G[7]*(F0 + F5));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[2] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 8)] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 858
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 858
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F2 += FE1_f2_C0[ip][r]*w[0][r];
            F3 += FE1_f0_C2[ip][r]*w[0][r];
            F4 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F5 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F6 += FE1_f2_C0[ip][r]*w[7][r];
            F7 += FE1_f0_C2[ip][r]*w[7][r];
            F8 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F9 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F10 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F11 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 140
          double I[8];
          // Number of operations: 19
          I[0] = W3[ip]*(G[49] + G[15]*(F3 + F7) + G[16]*(F10 + F8) + G[17]*(F1 + F5) + G[18]*(F2 + F6) + G[1]*(F0 + F4) + G[8]*(F11 + F9));
          
          // Number of operations: 19
          I[1] = W3[ip]*(G[50] + G[19]*(F1 + F5) + G[24]*(F2 + F6) + G[28]*(F10 + F8) + G[2]*(F0 + F4) + G[31]*(F3 + F7) + G[9]*(F11 + F9));
          
          // Number of operations: 13
          I[2] = W3[ip]*(G[51] + G[10]*(F3 + F7) + G[11]*(F1 + F5) + G[12]*(F2 + F6) + G[5]*(F0 + F4));
          
          // Number of operations: 19
          I[3] = W3[ip]*(G[52] + G[11]*(F11 + F9) + G[20]*(F3 + F7) + G[21]*(F10 + F8) + G[22]*(F1 + F5) + G[23]*(F2 + F6) + G[6]*(F0 + F4));
          
          // Number of operations: 19
          I[4] = W3[ip]*(G[53] + G[0]*(F0 + F4) + G[3]*(F3 + F7) + G[4]*(F10 + F8) + G[5]*(F11 + F9) + G[6]*(F1 + F5) + G[7]*(F2 + F6));
          
          // Number of operations: 13
          I[5] = W3[ip]*(G[54] + G[21]*(F1 + F5) + G[26]*(F2 + F6) + G[29]*(F3 + F7) + G[4]*(F0 + F4));
          
          // Number of operations: 19
          I[6] = W3[ip]*(G[55] + G[10]*(F11 + F9) + G[20]*(F1 + F5) + G[25]*(F2 + F6) + G[29]*(F10 + F8) + G[32]*(F3 + F7) + G[3]*(F0 + F4));
          
          // Number of operations: 19
          I[7] = W3[ip]*(G[56] + G[12]*(F11 + F9) + G[23]*(F1 + F5) + G[25]*(F3 + F7) + G[26]*(F10 + F8) + G[27]*(F2 + F6) + G[7]*(F0 + F4));
          
          
          // Number of operations for primary indices: 2
          // Number of operations to compute entry: 1
          A[10] += I[0];
          // Number of operations to compute entry: 1
          A[2] += I[1];
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 945
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 945
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE1_f1_C0[ip][0]*w[0][7];
            F7 += FE1_f1_C0[ip][0]*w[7][7];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f3_C1[ip][r]*w[0][r + 4];
            F3 += FE1_f2_C0[ip][r]*w[0][r];
            F4 += FE1_f0_C2[ip][r]*w[0][r];
            F5 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F6 += FE1_f3_C1[ip][r]*w[7][r + 4];
            F8 += FE1_f2_C0[ip][r]*w[7][r];
            F9 += FE1_f0_C2[ip][r]*w[7][r];
            F10 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F11 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F12 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 164
          double I[8];
          // Number of operations: 22
          I[0] = W3[ip]*(G[41] + G[14]*(F1 + F6) + G[19]*(F2 + F7) + G[24]*(F3 + F8) + G[28]*(F10 + F12) + G[2]*(F0 + F5) + G[31]*(F4 + F9) + G[9]*(F11 + F13));
          
          // Number of operations: 22
          I[1] = W3[ip]*(G[45] + G[11]*(F11 + F13) + G[17]*(F1 + F6) + G[20]*(F4 + F9) + G[21]*(F10 + F12) + G[22]*(F2 + F7) + G[23]*(F3 + F8) + G[6]*(F0 + F5));
          
          // Number of operations: 16
          I[2] = W3[ip]*(G[43] + G[10]*(F4 + F9) + G[11]*(F2 + F7) + G[12]*(F3 + F8) + G[5]*(F0 + F5) + G[8]*(F1 + F6));
          
          // Number of operations: 22
          I[3] = W3[ip]*(G[42] + G[0]*(F0 + F5) + G[1]*(F1 + F6) + G[3]*(F4 + F9) + G[4]*(F10 + F12) + G[5]*(F11 + F13) + G[6]*(F2 + F7) + G[7]*(F3 + F8));
          
          // Number of operations: 22
          I[4] = W3[ip]*(G[44] + G[13]*(F1 + F6) + G[15]*(F4 + F9) + G[16]*(F10 + F12) + G[17]*(F2 + F7) + G[18]*(F3 + F8) + G[1]*(F0 + F5) + G[8]*(F11 + F13));
          
          // Number of operations: 16
          I[5] = W3[ip]*(G[46] + G[16]*(F1 + F6) + G[21]*(F2 + F7) + G[26]*(F3 + F8) + G[29]*(F4 + F9) + G[4]*(F0 + F5));
          
          // Number of operations: 22
          I[6] = W3[ip]*(G[47] + G[10]*(F11 + F13) + G[15]*(F1 + F6) + G[20]*(F2 + F7) + G[25]*(F3 + F8) + G[29]*(F10 + F12) + G[32]*(F4 + F9) + G[3]*(F0 + F5));
          
          // Number of operations: 22
          I[7] = W3[ip]*(G[48] + G[12]*(F11 + F13) + G[18]*(F1 + F6) + G[23]*(F2 + F7) + G[25]*(F4 + F9) + G[26]*(F10 + F12) + G[27]*(F3 + F8) + G[7]*(F0 + F5));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[2] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc35[j] + 8)] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc34[j] + 8)] += FE1_f3_C1[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE1_f0_C2[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1062
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1062
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F5 += FE1_f1_C0[ip][0]*w[0][3];
            F11 += FE1_f1_C0[ip][0]*w[7][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 112
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f0_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F3 += FE1_f2_C0[ip][r]*w[0][r];
            F4 += FE1_f3_C1[ip][r]*w[0][r];
            F6 += FE1_f0_C0[ip][r]*w[7][r + 4];
            F7 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F8 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F9 += FE1_f2_C0[ip][r]*w[7][r];
            F10 += FE1_f3_C1[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          // Number of operations: 24
          I[1] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 18
          I[2] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc35[j]] += FE1_f1_C0[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc21[j] + 8)] += FE1_f0_C0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc34[j]] += FE1_f3_C1[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1008
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1008
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 8
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f1_C0[ip][0]*w[0][5];
            F5 += FE1_f1_C0[ip][0]*w[0][3];
            F6 += FE1_f1_C0[ip][0]*w[7][5];
            F11 += FE1_f1_C0[ip][0]*w[7][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE1_f0_C1[ip][r]*w[0][r + 4];
            F2 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F3 += FE1_f2_C0[ip][r]*w[0][r];
            F4 += FE1_f3_C1[ip][r]*w[0][r];
            F7 += FE1_f0_C1[ip][r]*w[7][r + 4];
            F8 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F9 += FE1_f2_C0[ip][r]*w[7][r];
            F10 += FE1_f3_C1[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 24
          I[1] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          // Number of operations: 18
          I[2] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 8)] += FE1_f1_C0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc35[j]] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc23[j] + 8)] += FE1_f0_C1[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc34[j]] += FE1_f3_C1[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 945
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 945
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F4 += FE1_f1_C0[ip][0]*w[0][3];
            F9 += FE1_f1_C0[ip][0]*w[7][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f0_C2[ip][r]*w[0][r + 4];
            F2 += FE1_f2_C0[ip][r]*w[0][r];
            F3 += FE1_f3_C1[ip][r]*w[0][r];
            F5 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F6 += FE1_f0_C2[ip][r]*w[7][r + 4];
            F7 += FE1_f2_C0[ip][r]*w[7][r];
            F8 += FE1_f3_C1[ip][r]*w[7][r];
            F10 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F11 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F12 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 164
          double I[8];
          // Number of operations: 22
          I[0] = W3[ip]*(G[33] + G[14]*(F3 + F8) + G[15]*(F4 + F9) + G[16]*(F10 + F12) + G[17]*(F1 + F6) + G[18]*(F2 + F7) + G[1]*(F0 + F5) + G[8]*(F11 + F13));
          
          // Number of operations: 22
          I[1] = W3[ip]*(G[40] + G[10]*(F11 + F13) + G[20]*(F1 + F6) + G[25]*(F2 + F7) + G[29]*(F10 + F12) + G[31]*(F3 + F8) + G[32]*(F4 + F9) + G[3]*(F0 + F5));
          
          // Number of operations: 16
          I[2] = W3[ip]*(G[34] + G[10]*(F4 + F9) + G[11]*(F1 + F6) + G[12]*(F2 + F7) + G[5]*(F0 + F5) + G[9]*(F3 + F8));
          
          // Number of operations: 22
          I[3] = W3[ip]*(G[35] + G[11]*(F11 + F13) + G[19]*(F3 + F8) + G[20]*(F4 + F9) + G[21]*(F10 + F12) + G[22]*(F1 + F6) + G[23]*(F2 + F7) + G[6]*(F0 + F5));
          
          // Number of operations: 22
          I[4] = W3[ip]*(G[36] + G[0]*(F0 + F5) + G[2]*(F3 + F8) + G[3]*(F4 + F9) + G[4]*(F10 + F12) + G[5]*(F11 + F13) + G[6]*(F1 + F6) + G[7]*(F2 + F7));
          
          // Number of operations: 16
          I[5] = W3[ip]*(G[38] + G[21]*(F1 + F6) + G[26]*(F2 + F7) + G[28]*(F3 + F8) + G[29]*(F4 + F9) + G[4]*(F0 + F5));
          
          // Number of operations: 22
          I[6] = W3[ip]*(G[37] + G[12]*(F11 + F13) + G[23]*(F1 + F6) + G[24]*(F3 + F8) + G[25]*(F4 + F9) + G[26]*(F10 + F12) + G[27]*(F2 + F7) + G[7]*(F0 + F5));
          
          // Number of operations: 22
          I[7] = W3[ip]*(G[39] + G[19]*(F1 + F6) + G[24]*(F2 + F7) + G[28]*(F10 + F12) + G[2]*(F0 + F5) + G[30]*(F3 + F8) + G[31]*(F4 + F9) + G[9]*(F11 + F13));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[10] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc35[j]] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 8)] += FE1_f0_C2[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc34[j]] += FE1_f3_C1[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1008
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1008
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          
          // Total number of operations to compute function values = 8
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE1_f1_C0[ip][0]*w[0][7];
            F5 += FE1_f1_C0[ip][0]*w[0][3];
            F8 += FE1_f1_C0[ip][0]*w[7][7];
            F11 += FE1_f1_C0[ip][0]*w[7][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 96
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE1_f2_C0[ip][r]*w[0][r + 4];
            F1 += FE1_f3_C1[ip][r]*w[0][r + 4];
            F3 += FE1_f2_C0[ip][r]*w[0][r];
            F4 += FE1_f3_C1[ip][r]*w[0][r];
            F6 += FE1_f2_C0[ip][r]*w[7][r + 4];
            F7 += FE1_f3_C1[ip][r]*w[7][r + 4];
            F9 += FE1_f2_C0[ip][r]*w[7][r];
            F10 += FE1_f3_C1[ip][r]*w[7][r];
            F12 += FE1_f0_C0_D100[ip][r]*w[0][r];
            F13 += FE1_f0_C0_D100[ip][r]*w[0][r + 4];
            F14 += FE1_f0_C0_D100[ip][r]*w[7][r];
            F15 += FE1_f0_C0_D100[ip][r]*w[7][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 180
          double I[8];
          // Number of operations: 24
          I[0] = W3[ip]*(G[11]*(F13 + F15) + G[17]*(F1 + F7) + G[19]*(F10 + F4) + G[20]*(F11 + F5) + G[21]*(F12 + F14) + G[22]*(F2 + F8) + G[23]*(F3 + F9) + G[6]*(F0 + F6));
          
          // Number of operations: 24
          I[1] = W3[ip]*(G[10]*(F13 + F15) + G[15]*(F1 + F7) + G[20]*(F2 + F8) + G[25]*(F3 + F9) + G[29]*(F12 + F14) + G[31]*(F10 + F4) + G[32]*(F11 + F5) + G[3]*(F0 + F6));
          
          // Number of operations: 18
          I[2] = W3[ip]*(G[10]*(F11 + F5) + G[11]*(F2 + F8) + G[12]*(F3 + F9) + G[5]*(F0 + F6) + G[8]*(F1 + F7) + G[9]*(F10 + F4));
          
          // Number of operations: 24
          I[3] = W3[ip]*(G[0]*(F0 + F6) + G[1]*(F1 + F7) + G[2]*(F10 + F4) + G[3]*(F11 + F5) + G[4]*(F12 + F14) + G[5]*(F13 + F15) + G[6]*(F2 + F8) + G[7]*(F3 + F9));
          
          // Number of operations: 24
          I[4] = W3[ip]*(G[13]*(F1 + F7) + G[14]*(F10 + F4) + G[15]*(F11 + F5) + G[16]*(F12 + F14) + G[17]*(F2 + F8) + G[18]*(F3 + F9) + G[1]*(F0 + F6) + G[8]*(F13 + F15));
          
          // Number of operations: 18
          I[5] = W3[ip]*(G[16]*(F1 + F7) + G[21]*(F2 + F8) + G[26]*(F3 + F9) + G[28]*(F10 + F4) + G[29]*(F11 + F5) + G[4]*(F0 + F6));
          
          // Number of operations: 24
          I[6] = W3[ip]*(G[12]*(F13 + F15) + G[18]*(F1 + F7) + G[23]*(F2 + F8) + G[24]*(F10 + F4) + G[25]*(F11 + F5) + G[26]*(F12 + F14) + G[27]*(F3 + F9) + G[7]*(F0 + F6));
          
          // Number of operations: 24
          I[7] = W3[ip]*(G[14]*(F1 + F7) + G[19]*(F2 + F8) + G[24]*(F3 + F9) + G[28]*(F12 + F14) + G[2]*(F0 + F6) + G[30]*(F10 + F4) + G[31]*(F11 + F5) + G[9]*(F13 + F15));
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc35[j] + 8)] += FE1_f1_C0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc35[j]] += FE1_f1_C0[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc22[j] + 8)] += FE1_f0_C0_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc31[j] + 8)] += FE1_f2_C0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc34[j] + 8)] += FE1_f3_C1[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc22[j]] += FE1_f0_C0_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc31[j]] += FE1_f2_C0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc34[j]] += FE1_f3_C1[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class stokes_with_pnp_form_0: public ufc::form
{
public:

  /// Constructor
  stokes_with_pnp_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "2f0457aac45fb6f63b4fbe45dc2eb750cba61c75f7aa9a38edaebf6ace62c62bf7cf80c761abc03e3ecf4d3d8394613a439dc537eb06cf4d9edd6cc3f60da13b";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 2;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new stokes_with_pnp_finite_element_4();
        break;
      }
    case 1:
      {
        return new stokes_with_pnp_finite_element_4();
        break;
      }
    case 2:
      {
        return new stokes_with_pnp_finite_element_1();
        break;
      }
    case 3:
      {
        return new stokes_with_pnp_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new stokes_with_pnp_dofmap_4();
        break;
      }
    case 1:
      {
        return new stokes_with_pnp_dofmap_4();
        break;
      }
    case 2:
      {
        return new stokes_with_pnp_dofmap_1();
        break;
      }
    case 3:
      {
        return new stokes_with_pnp_dofmap_1();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new stokes_with_pnp_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return new stokes_with_pnp_interior_facet_integral_0_otherwise();
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class stokes_with_pnp_form_1: public ufc::form
{
public:

  /// Constructor
  stokes_with_pnp_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~stokes_with_pnp_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "f7297c00eef3b8b80936b848628aed7d829e493fe81677a5dc75c6a301c0a6579bd5cc9b2b7a7addf4933144e47583a9223c36736f6df91ca5007f6e73b77090";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 14;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new stokes_with_pnp_finite_element_4();
        break;
      }
    case 1:
      {
        return new stokes_with_pnp_finite_element_2();
        break;
      }
    case 2:
      {
        return new stokes_with_pnp_finite_element_3();
        break;
      }
    case 3:
      {
        return new stokes_with_pnp_finite_element_0();
        break;
      }
    case 4:
      {
        return new stokes_with_pnp_finite_element_0();
        break;
      }
    case 5:
      {
        return new stokes_with_pnp_finite_element_0();
        break;
      }
    case 6:
      {
        return new stokes_with_pnp_finite_element_1();
        break;
      }
    case 7:
      {
        return new stokes_with_pnp_finite_element_1();
        break;
      }
    case 8:
      {
        return new stokes_with_pnp_finite_element_2();
        break;
      }
    case 9:
      {
        return new stokes_with_pnp_finite_element_3();
        break;
      }
    case 10:
      {
        return new stokes_with_pnp_finite_element_0();
        break;
      }
    case 11:
      {
        return new stokes_with_pnp_finite_element_0();
        break;
      }
    case 12:
      {
        return new stokes_with_pnp_finite_element_0();
        break;
      }
    case 13:
      {
        return new stokes_with_pnp_finite_element_1();
        break;
      }
    case 14:
      {
        return new stokes_with_pnp_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new stokes_with_pnp_dofmap_4();
        break;
      }
    case 1:
      {
        return new stokes_with_pnp_dofmap_2();
        break;
      }
    case 2:
      {
        return new stokes_with_pnp_dofmap_3();
        break;
      }
    case 3:
      {
        return new stokes_with_pnp_dofmap_0();
        break;
      }
    case 4:
      {
        return new stokes_with_pnp_dofmap_0();
        break;
      }
    case 5:
      {
        return new stokes_with_pnp_dofmap_0();
        break;
      }
    case 6:
      {
        return new stokes_with_pnp_dofmap_1();
        break;
      }
    case 7:
      {
        return new stokes_with_pnp_dofmap_1();
        break;
      }
    case 8:
      {
        return new stokes_with_pnp_dofmap_2();
        break;
      }
    case 9:
      {
        return new stokes_with_pnp_dofmap_3();
        break;
      }
    case 10:
      {
        return new stokes_with_pnp_dofmap_0();
        break;
      }
    case 11:
      {
        return new stokes_with_pnp_dofmap_0();
        break;
      }
    case 12:
      {
        return new stokes_with_pnp_dofmap_0();
        break;
      }
    case 13:
      {
        return new stokes_with_pnp_dofmap_1();
        break;
      }
    case 14:
      {
        return new stokes_with_pnp_dofmap_1();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new stokes_with_pnp_cell_integral_1_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return new stokes_with_pnp_interior_facet_integral_1_otherwise();
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>

namespace stokes_with_pnp
{

class CoefficientSpace_alpha: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_alpha(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_alpha(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_alpha(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_alpha(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_anion: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_anion(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_anion(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_anion(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_anion(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_cation: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_cation(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_cation(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_cation(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_cation(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_dAn: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dAn(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dAn(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dAn(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dAn(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_dCat: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dCat(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dCat(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dCat(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dCat(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_dPhi: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dPhi(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dPhi(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dPhi(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dPhi(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_dPress: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dPress(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dPress(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_dPress(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_dPress(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_du: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_du(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_du(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_du(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_du(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_mu: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_mu(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_mu(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_phi: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_phi(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_phi(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_phi(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_phi(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_pp: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_pp(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_pp(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_pp(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_pp(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_3()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qn: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qn(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qn(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qn(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qn(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qp: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qp(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qp(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qp(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qp(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_uu: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_uu(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_uu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_uu(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_uu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_mu Form_a_FunctionSpace_2;

typedef CoefficientSpace_alpha Form_a_FunctionSpace_3;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0):
    dolfin::Form(2, 2), mu(*this, 0), alpha(*this, 1)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_0());
  }

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& mu, const dolfin::GenericFunction& alpha):
    dolfin::Form(2, 2), mu(*this, 0), alpha(*this, 1)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->mu = mu;
    this->alpha = alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_0());
  }

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> alpha):
    dolfin::Form(2, 2), mu(*this, 0), alpha(*this, 1)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->mu = *mu;
    this->alpha = *alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 2), mu(*this, 0), alpha(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& mu, const dolfin::GenericFunction& alpha):
    dolfin::Form(2, 2), mu(*this, 0), alpha(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->mu = mu;
    this->alpha = alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> alpha):
    dolfin::Form(2, 2), mu(*this, 0), alpha(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->mu = *mu;
    this->alpha = *alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_0());
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "mu")
      return 0;
    else if (name == "alpha")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "mu";
    case 1:
      return "alpha";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_mu;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_alpha;

  // Coefficients
  dolfin::CoefficientAssigner mu;
  dolfin::CoefficientAssigner alpha;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new stokes_with_pnp_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new stokes_with_pnp_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_uu Form_L_FunctionSpace_1;

typedef CoefficientSpace_pp Form_L_FunctionSpace_2;

typedef CoefficientSpace_phi Form_L_FunctionSpace_3;

typedef CoefficientSpace_cation Form_L_FunctionSpace_4;

typedef CoefficientSpace_anion Form_L_FunctionSpace_5;

typedef CoefficientSpace_qp Form_L_FunctionSpace_6;

typedef CoefficientSpace_qn Form_L_FunctionSpace_7;

typedef CoefficientSpace_du Form_L_FunctionSpace_8;

typedef CoefficientSpace_dPress Form_L_FunctionSpace_9;

typedef CoefficientSpace_dPhi Form_L_FunctionSpace_10;

typedef CoefficientSpace_dCat Form_L_FunctionSpace_11;

typedef CoefficientSpace_dAn Form_L_FunctionSpace_12;

typedef CoefficientSpace_mu Form_L_FunctionSpace_13;

typedef CoefficientSpace_alpha Form_L_FunctionSpace_14;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 14), uu(*this, 0), pp(*this, 1), phi(*this, 2), cation(*this, 3), anion(*this, 4), qp(*this, 5), qn(*this, 6), du(*this, 7), dPress(*this, 8), dPhi(*this, 9), dCat(*this, 10), dAn(*this, 11), mu(*this, 12), alpha(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_1());
  }

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& uu, const dolfin::GenericFunction& pp, const dolfin::GenericFunction& phi, const dolfin::GenericFunction& cation, const dolfin::GenericFunction& anion, const dolfin::GenericFunction& qp, const dolfin::GenericFunction& qn, const dolfin::GenericFunction& du, const dolfin::GenericFunction& dPress, const dolfin::GenericFunction& dPhi, const dolfin::GenericFunction& dCat, const dolfin::GenericFunction& dAn, const dolfin::GenericFunction& mu, const dolfin::GenericFunction& alpha):
    dolfin::Form(1, 14), uu(*this, 0), pp(*this, 1), phi(*this, 2), cation(*this, 3), anion(*this, 4), qp(*this, 5), qn(*this, 6), du(*this, 7), dPress(*this, 8), dPhi(*this, 9), dCat(*this, 10), dAn(*this, 11), mu(*this, 12), alpha(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uu = uu;
    this->pp = pp;
    this->phi = phi;
    this->cation = cation;
    this->anion = anion;
    this->qp = qp;
    this->qn = qn;
    this->du = du;
    this->dPress = dPress;
    this->dPhi = dPhi;
    this->dCat = dCat;
    this->dAn = dAn;
    this->mu = mu;
    this->alpha = alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_1());
  }

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> pp, std::shared_ptr<const dolfin::GenericFunction> phi, std::shared_ptr<const dolfin::GenericFunction> cation, std::shared_ptr<const dolfin::GenericFunction> anion, std::shared_ptr<const dolfin::GenericFunction> qp, std::shared_ptr<const dolfin::GenericFunction> qn, std::shared_ptr<const dolfin::GenericFunction> du, std::shared_ptr<const dolfin::GenericFunction> dPress, std::shared_ptr<const dolfin::GenericFunction> dPhi, std::shared_ptr<const dolfin::GenericFunction> dCat, std::shared_ptr<const dolfin::GenericFunction> dAn, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> alpha):
    dolfin::Form(1, 14), uu(*this, 0), pp(*this, 1), phi(*this, 2), cation(*this, 3), anion(*this, 4), qp(*this, 5), qn(*this, 6), du(*this, 7), dPress(*this, 8), dPhi(*this, 9), dCat(*this, 10), dAn(*this, 11), mu(*this, 12), alpha(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uu = *uu;
    this->pp = *pp;
    this->phi = *phi;
    this->cation = *cation;
    this->anion = *anion;
    this->qp = *qp;
    this->qn = *qn;
    this->du = *du;
    this->dPress = *dPress;
    this->dPhi = *dPhi;
    this->dCat = *dCat;
    this->dAn = *dAn;
    this->mu = *mu;
    this->alpha = *alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 14), uu(*this, 0), pp(*this, 1), phi(*this, 2), cation(*this, 3), anion(*this, 4), qp(*this, 5), qn(*this, 6), du(*this, 7), dPress(*this, 8), dPhi(*this, 9), dCat(*this, 10), dAn(*this, 11), mu(*this, 12), alpha(*this, 13)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& uu, const dolfin::GenericFunction& pp, const dolfin::GenericFunction& phi, const dolfin::GenericFunction& cation, const dolfin::GenericFunction& anion, const dolfin::GenericFunction& qp, const dolfin::GenericFunction& qn, const dolfin::GenericFunction& du, const dolfin::GenericFunction& dPress, const dolfin::GenericFunction& dPhi, const dolfin::GenericFunction& dCat, const dolfin::GenericFunction& dAn, const dolfin::GenericFunction& mu, const dolfin::GenericFunction& alpha):
    dolfin::Form(1, 14), uu(*this, 0), pp(*this, 1), phi(*this, 2), cation(*this, 3), anion(*this, 4), qp(*this, 5), qn(*this, 6), du(*this, 7), dPress(*this, 8), dPhi(*this, 9), dCat(*this, 10), dAn(*this, 11), mu(*this, 12), alpha(*this, 13)
  {
    _function_spaces[0] = V0;

    this->uu = uu;
    this->pp = pp;
    this->phi = phi;
    this->cation = cation;
    this->anion = anion;
    this->qp = qp;
    this->qn = qn;
    this->du = du;
    this->dPress = dPress;
    this->dPhi = dPhi;
    this->dCat = dCat;
    this->dAn = dAn;
    this->mu = mu;
    this->alpha = alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> pp, std::shared_ptr<const dolfin::GenericFunction> phi, std::shared_ptr<const dolfin::GenericFunction> cation, std::shared_ptr<const dolfin::GenericFunction> anion, std::shared_ptr<const dolfin::GenericFunction> qp, std::shared_ptr<const dolfin::GenericFunction> qn, std::shared_ptr<const dolfin::GenericFunction> du, std::shared_ptr<const dolfin::GenericFunction> dPress, std::shared_ptr<const dolfin::GenericFunction> dPhi, std::shared_ptr<const dolfin::GenericFunction> dCat, std::shared_ptr<const dolfin::GenericFunction> dAn, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> alpha):
    dolfin::Form(1, 14), uu(*this, 0), pp(*this, 1), phi(*this, 2), cation(*this, 3), anion(*this, 4), qp(*this, 5), qn(*this, 6), du(*this, 7), dPress(*this, 8), dPhi(*this, 9), dCat(*this, 10), dAn(*this, 11), mu(*this, 12), alpha(*this, 13)
  {
    _function_spaces[0] = V0;

    this->uu = *uu;
    this->pp = *pp;
    this->phi = *phi;
    this->cation = *cation;
    this->anion = *anion;
    this->qp = *qp;
    this->qn = *qn;
    this->du = *du;
    this->dPress = *dPress;
    this->dPhi = *dPhi;
    this->dCat = *dCat;
    this->dAn = *dAn;
    this->mu = *mu;
    this->alpha = *alpha;

    _ufc_form = std::shared_ptr<const ufc::form>(new stokes_with_pnp_form_1());
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uu")
      return 0;
    else if (name == "pp")
      return 1;
    else if (name == "phi")
      return 2;
    else if (name == "cation")
      return 3;
    else if (name == "anion")
      return 4;
    else if (name == "qp")
      return 5;
    else if (name == "qn")
      return 6;
    else if (name == "du")
      return 7;
    else if (name == "dPress")
      return 8;
    else if (name == "dPhi")
      return 9;
    else if (name == "dCat")
      return 10;
    else if (name == "dAn")
      return 11;
    else if (name == "mu")
      return 12;
    else if (name == "alpha")
      return 13;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uu";
    case 1:
      return "pp";
    case 2:
      return "phi";
    case 3:
      return "cation";
    case 4:
      return "anion";
    case 5:
      return "qp";
    case 6:
      return "qn";
    case 7:
      return "du";
    case 8:
      return "dPress";
    case 9:
      return "dPhi";
    case 10:
      return "dCat";
    case 11:
      return "dAn";
    case 12:
      return "mu";
    case 13:
      return "alpha";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_uu;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_pp;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_phi;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_cation;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_anion;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_qp;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_qn;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_du;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_dPress;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_dPhi;
  typedef Form_L_FunctionSpace_11 CoefficientSpace_dCat;
  typedef Form_L_FunctionSpace_12 CoefficientSpace_dAn;
  typedef Form_L_FunctionSpace_13 CoefficientSpace_mu;
  typedef Form_L_FunctionSpace_14 CoefficientSpace_alpha;

  // Coefficients
  dolfin::CoefficientAssigner uu;
  dolfin::CoefficientAssigner pp;
  dolfin::CoefficientAssigner phi;
  dolfin::CoefficientAssigner cation;
  dolfin::CoefficientAssigner anion;
  dolfin::CoefficientAssigner qp;
  dolfin::CoefficientAssigner qn;
  dolfin::CoefficientAssigner du;
  dolfin::CoefficientAssigner dPress;
  dolfin::CoefficientAssigner dPhi;
  dolfin::CoefficientAssigner dCat;
  dolfin::CoefficientAssigner dAn;
  dolfin::CoefficientAssigner mu;
  dolfin::CoefficientAssigner alpha;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef Form_a JacobianForm;
typedef Form_L LinearForm;
typedef Form_L ResidualForm;
typedef Form_a::TestSpace FunctionSpace;

}

#endif
